
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model CampaignAttachments
 * 
 */
export type CampaignAttachments = $Result.DefaultSelection<Prisma.$CampaignAttachmentsPayload>
/**
 * Model EmailSent
 * 
 */
export type EmailSent = $Result.DefaultSelection<Prisma.$EmailSentPayload>
/**
 * Model LeadEmailStatus
 * 
 */
export type LeadEmailStatus = $Result.DefaultSelection<Prisma.$LeadEmailStatusPayload>
/**
 * Model Lead
 * 
 */
export type Lead = $Result.DefaultSelection<Prisma.$LeadPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const LeadStatus: {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  SKIPPED: 'SKIPPED'
};

export type LeadStatus = (typeof LeadStatus)[keyof typeof LeadStatus]


export const CampaignStatus: {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

export type CampaignStatus = (typeof CampaignStatus)[keyof typeof CampaignStatus]


export const EmailStatus: {
  PENDING: 'PENDING',
  QUEUED: 'QUEUED',
  SENT: 'SENT',
  FAILED: 'FAILED',
  SKIPPED: 'SKIPPED'
};

export type EmailStatus = (typeof EmailStatus)[keyof typeof EmailStatus]

}

export type LeadStatus = $Enums.LeadStatus

export const LeadStatus: typeof $Enums.LeadStatus

export type CampaignStatus = $Enums.CampaignStatus

export const CampaignStatus: typeof $Enums.CampaignStatus

export type EmailStatus = $Enums.EmailStatus

export const EmailStatus: typeof $Enums.EmailStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.campaignAttachments`: Exposes CRUD operations for the **CampaignAttachments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CampaignAttachments
    * const campaignAttachments = await prisma.campaignAttachments.findMany()
    * ```
    */
  get campaignAttachments(): Prisma.CampaignAttachmentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailSent`: Exposes CRUD operations for the **EmailSent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailSents
    * const emailSents = await prisma.emailSent.findMany()
    * ```
    */
  get emailSent(): Prisma.EmailSentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leadEmailStatus`: Exposes CRUD operations for the **LeadEmailStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadEmailStatuses
    * const leadEmailStatuses = await prisma.leadEmailStatus.findMany()
    * ```
    */
  get leadEmailStatus(): Prisma.LeadEmailStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lead`: Exposes CRUD operations for the **Lead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leads
    * const leads = await prisma.lead.findMany()
    * ```
    */
  get lead(): Prisma.LeadDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.0
   * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Token: 'Token',
    Campaign: 'Campaign',
    CampaignAttachments: 'CampaignAttachments',
    EmailSent: 'EmailSent',
    LeadEmailStatus: 'LeadEmailStatus',
    Lead: 'Lead'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "token" | "campaign" | "campaignAttachments" | "emailSent" | "leadEmailStatus" | "lead"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CampaignUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      CampaignAttachments: {
        payload: Prisma.$CampaignAttachmentsPayload<ExtArgs>
        fields: Prisma.CampaignAttachmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignAttachmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignAttachmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>
          }
          findFirst: {
            args: Prisma.CampaignAttachmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignAttachmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>
          }
          findMany: {
            args: Prisma.CampaignAttachmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>[]
          }
          create: {
            args: Prisma.CampaignAttachmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>
          }
          createMany: {
            args: Prisma.CampaignAttachmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignAttachmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>[]
          }
          delete: {
            args: Prisma.CampaignAttachmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>
          }
          update: {
            args: Prisma.CampaignAttachmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>
          }
          deleteMany: {
            args: Prisma.CampaignAttachmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignAttachmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CampaignAttachmentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>[]
          }
          upsert: {
            args: Prisma.CampaignAttachmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignAttachmentsPayload>
          }
          aggregate: {
            args: Prisma.CampaignAttachmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaignAttachments>
          }
          groupBy: {
            args: Prisma.CampaignAttachmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignAttachmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignAttachmentsCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignAttachmentsCountAggregateOutputType> | number
          }
        }
      }
      EmailSent: {
        payload: Prisma.$EmailSentPayload<ExtArgs>
        fields: Prisma.EmailSentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailSentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailSentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>
          }
          findFirst: {
            args: Prisma.EmailSentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailSentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>
          }
          findMany: {
            args: Prisma.EmailSentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>[]
          }
          create: {
            args: Prisma.EmailSentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>
          }
          createMany: {
            args: Prisma.EmailSentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailSentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>[]
          }
          delete: {
            args: Prisma.EmailSentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>
          }
          update: {
            args: Prisma.EmailSentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>
          }
          deleteMany: {
            args: Prisma.EmailSentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailSentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailSentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>[]
          }
          upsert: {
            args: Prisma.EmailSentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSentPayload>
          }
          aggregate: {
            args: Prisma.EmailSentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailSent>
          }
          groupBy: {
            args: Prisma.EmailSentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailSentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailSentCountArgs<ExtArgs>
            result: $Utils.Optional<EmailSentCountAggregateOutputType> | number
          }
        }
      }
      LeadEmailStatus: {
        payload: Prisma.$LeadEmailStatusPayload<ExtArgs>
        fields: Prisma.LeadEmailStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadEmailStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadEmailStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>
          }
          findFirst: {
            args: Prisma.LeadEmailStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadEmailStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>
          }
          findMany: {
            args: Prisma.LeadEmailStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>[]
          }
          create: {
            args: Prisma.LeadEmailStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>
          }
          createMany: {
            args: Prisma.LeadEmailStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadEmailStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>[]
          }
          delete: {
            args: Prisma.LeadEmailStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>
          }
          update: {
            args: Prisma.LeadEmailStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>
          }
          deleteMany: {
            args: Prisma.LeadEmailStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadEmailStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeadEmailStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>[]
          }
          upsert: {
            args: Prisma.LeadEmailStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadEmailStatusPayload>
          }
          aggregate: {
            args: Prisma.LeadEmailStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadEmailStatus>
          }
          groupBy: {
            args: Prisma.LeadEmailStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadEmailStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadEmailStatusCountArgs<ExtArgs>
            result: $Utils.Optional<LeadEmailStatusCountAggregateOutputType> | number
          }
        }
      }
      Lead: {
        payload: Prisma.$LeadPayload<ExtArgs>
        fields: Prisma.LeadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findFirst: {
            args: Prisma.LeadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findMany: {
            args: Prisma.LeadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          create: {
            args: Prisma.LeadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          createMany: {
            args: Prisma.LeadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          delete: {
            args: Prisma.LeadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          update: {
            args: Prisma.LeadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          deleteMany: {
            args: Prisma.LeadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          upsert: {
            args: Prisma.LeadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          aggregate: {
            args: Prisma.LeadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLead>
          }
          groupBy: {
            args: Prisma.LeadGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadCountArgs<ExtArgs>
            result: $Utils.Optional<LeadCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    token?: TokenOmit
    campaign?: CampaignOmit
    campaignAttachments?: CampaignAttachmentsOmit
    emailSent?: EmailSentOmit
    leadEmailStatus?: LeadEmailStatusOmit
    lead?: LeadOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    campaign: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | UserCountOutputTypeCountCampaignArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }


  /**
   * Count Type CampaignCountOutputType
   */

  export type CampaignCountOutputType = {
    leads: number
    emailSent: number
  }

  export type CampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leads?: boolean | CampaignCountOutputTypeCountLeadsArgs
    emailSent?: boolean | CampaignCountOutputTypeCountEmailSentArgs
  }

  // Custom InputTypes
  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignCountOutputType
     */
    select?: CampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountEmailSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailSentWhereInput
  }


  /**
   * Count Type EmailSentCountOutputType
   */

  export type EmailSentCountOutputType = {
    campaignAttachments: number
    leadEmailStatus: number
  }

  export type EmailSentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaignAttachments?: boolean | EmailSentCountOutputTypeCountCampaignAttachmentsArgs
    leadEmailStatus?: boolean | EmailSentCountOutputTypeCountLeadEmailStatusArgs
  }

  // Custom InputTypes
  /**
   * EmailSentCountOutputType without action
   */
  export type EmailSentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSentCountOutputType
     */
    select?: EmailSentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailSentCountOutputType without action
   */
  export type EmailSentCountOutputTypeCountCampaignAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignAttachmentsWhereInput
  }

  /**
   * EmailSentCountOutputType without action
   */
  export type EmailSentCountOutputTypeCountLeadEmailStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadEmailStatusWhereInput
  }


  /**
   * Count Type LeadCountOutputType
   */

  export type LeadCountOutputType = {
    leadEmailStatuses: number
  }

  export type LeadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leadEmailStatuses?: boolean | LeadCountOutputTypeCountLeadEmailStatusesArgs
  }

  // Custom InputTypes
  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadCountOutputType
     */
    select?: LeadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountLeadEmailStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadEmailStatusWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    googleId: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    googleAccessToken: string | null
    googleRefreshToken: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    googleId: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    googleAccessToken: string | null
    googleRefreshToken: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    googleId: number
    resetToken: number
    resetTokenExpiry: number
    googleAccessToken: number
    googleRefreshToken: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    googleId?: true
    resetToken?: true
    resetTokenExpiry?: true
    googleAccessToken?: true
    googleRefreshToken?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    googleId?: true
    resetToken?: true
    resetTokenExpiry?: true
    googleAccessToken?: true
    googleRefreshToken?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    googleId?: true
    resetToken?: true
    resetTokenExpiry?: true
    googleAccessToken?: true
    googleRefreshToken?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string | null
    googleId: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    googleAccessToken: string | null
    googleRefreshToken: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    googleId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    googleAccessToken?: boolean
    googleRefreshToken?: boolean
    createdAt?: boolean
    campaign?: boolean | User$campaignArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    googleId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    googleAccessToken?: boolean
    googleRefreshToken?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    googleId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    googleAccessToken?: boolean
    googleRefreshToken?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    googleId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    googleAccessToken?: boolean
    googleRefreshToken?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "googleId" | "resetToken" | "resetTokenExpiry" | "googleAccessToken" | "googleRefreshToken" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | User$campaignArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string | null
      googleId: string | null
      resetToken: string | null
      resetTokenExpiry: Date | null
      googleAccessToken: string | null
      googleRefreshToken: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends User$campaignArgs<ExtArgs> = {}>(args?: Subset<T, User$campaignArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly googleAccessToken: FieldRef<"User", 'String'>
    readonly googleRefreshToken: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.campaign
   */
  export type User$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    token: string | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    token: string | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    token: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    token?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    token?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    token?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: number
    token: string
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    id?: boolean
    token?: boolean
  }

  export type TokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token", ExtArgs["result"]["token"]>

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      token: string
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokenCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens and returns the data updated in the database.
     * @param {TokenUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TokenUpdateManyAndReturnArgs>(args: SelectSubset<T, TokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'Int'>
    readonly token: FieldRef<"Token", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token createManyAndReturn
   */
  export type TokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token updateManyAndReturn
   */
  export type TokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to delete.
     */
    limit?: number
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CampaignSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CampaignMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    subject: string | null
    body: string | null
    status: $Enums.CampaignStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    subject: string | null
    body: string | null
    status: $Enums.CampaignStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    subject: number
    body: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CampaignAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CampaignSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CampaignMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    subject?: true
    body?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    subject?: true
    body?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    subject?: true
    body?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _avg?: CampaignAvgAggregateInputType
    _sum?: CampaignSumAggregateInputType
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: number
    name: string
    userId: number
    subject: string
    body: string
    status: $Enums.CampaignStatus
    createdAt: Date
    updatedAt: Date
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    subject?: boolean
    body?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    leads?: boolean | Campaign$leadsArgs<ExtArgs>
    emailSent?: boolean | Campaign$emailSentArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    subject?: boolean
    body?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    subject?: boolean
    body?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    subject?: boolean
    body?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CampaignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId" | "subject" | "body" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["campaign"]>
  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    leads?: boolean | Campaign$leadsArgs<ExtArgs>
    emailSent?: boolean | Campaign$emailSentArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      leads: Prisma.$LeadPayload<ExtArgs>[]
      emailSent: Prisma.$EmailSentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userId: number
      subject: string
      body: string
      status: $Enums.CampaignStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns and returns the data updated in the database.
     * @param {CampaignUpdateManyAndReturnArgs} args - Arguments to update many Campaigns.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CampaignUpdateManyAndReturnArgs>(args: SelectSubset<T, CampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    leads<T extends Campaign$leadsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailSent<T extends Campaign$emailSentArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$emailSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'Int'>
    readonly name: FieldRef<"Campaign", 'String'>
    readonly userId: FieldRef<"Campaign", 'Int'>
    readonly subject: FieldRef<"Campaign", 'String'>
    readonly body: FieldRef<"Campaign", 'String'>
    readonly status: FieldRef<"Campaign", 'CampaignStatus'>
    readonly createdAt: FieldRef<"Campaign", 'DateTime'>
    readonly updatedAt: FieldRef<"Campaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
  }

  /**
   * Campaign updateManyAndReturn
   */
  export type CampaignUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to delete.
     */
    limit?: number
  }

  /**
   * Campaign.leads
   */
  export type Campaign$leadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    cursor?: LeadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Campaign.emailSent
   */
  export type Campaign$emailSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    where?: EmailSentWhereInput
    orderBy?: EmailSentOrderByWithRelationInput | EmailSentOrderByWithRelationInput[]
    cursor?: EmailSentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailSentScalarFieldEnum | EmailSentScalarFieldEnum[]
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
  }


  /**
   * Model CampaignAttachments
   */

  export type AggregateCampaignAttachments = {
    _count: CampaignAttachmentsCountAggregateOutputType | null
    _avg: CampaignAttachmentsAvgAggregateOutputType | null
    _sum: CampaignAttachmentsSumAggregateOutputType | null
    _min: CampaignAttachmentsMinAggregateOutputType | null
    _max: CampaignAttachmentsMaxAggregateOutputType | null
  }

  export type CampaignAttachmentsAvgAggregateOutputType = {
    id: number | null
    emailSentId: number | null
  }

  export type CampaignAttachmentsSumAggregateOutputType = {
    id: number | null
    emailSentId: number | null
  }

  export type CampaignAttachmentsMinAggregateOutputType = {
    id: number | null
    filename: string | null
    url: string | null
    emailSentId: number | null
  }

  export type CampaignAttachmentsMaxAggregateOutputType = {
    id: number | null
    filename: string | null
    url: string | null
    emailSentId: number | null
  }

  export type CampaignAttachmentsCountAggregateOutputType = {
    id: number
    filename: number
    url: number
    emailSentId: number
    _all: number
  }


  export type CampaignAttachmentsAvgAggregateInputType = {
    id?: true
    emailSentId?: true
  }

  export type CampaignAttachmentsSumAggregateInputType = {
    id?: true
    emailSentId?: true
  }

  export type CampaignAttachmentsMinAggregateInputType = {
    id?: true
    filename?: true
    url?: true
    emailSentId?: true
  }

  export type CampaignAttachmentsMaxAggregateInputType = {
    id?: true
    filename?: true
    url?: true
    emailSentId?: true
  }

  export type CampaignAttachmentsCountAggregateInputType = {
    id?: true
    filename?: true
    url?: true
    emailSentId?: true
    _all?: true
  }

  export type CampaignAttachmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CampaignAttachments to aggregate.
     */
    where?: CampaignAttachmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignAttachments to fetch.
     */
    orderBy?: CampaignAttachmentsOrderByWithRelationInput | CampaignAttachmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignAttachmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CampaignAttachments
    **/
    _count?: true | CampaignAttachmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignAttachmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignAttachmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignAttachmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignAttachmentsMaxAggregateInputType
  }

  export type GetCampaignAttachmentsAggregateType<T extends CampaignAttachmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaignAttachments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaignAttachments[P]>
      : GetScalarType<T[P], AggregateCampaignAttachments[P]>
  }




  export type CampaignAttachmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignAttachmentsWhereInput
    orderBy?: CampaignAttachmentsOrderByWithAggregationInput | CampaignAttachmentsOrderByWithAggregationInput[]
    by: CampaignAttachmentsScalarFieldEnum[] | CampaignAttachmentsScalarFieldEnum
    having?: CampaignAttachmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignAttachmentsCountAggregateInputType | true
    _avg?: CampaignAttachmentsAvgAggregateInputType
    _sum?: CampaignAttachmentsSumAggregateInputType
    _min?: CampaignAttachmentsMinAggregateInputType
    _max?: CampaignAttachmentsMaxAggregateInputType
  }

  export type CampaignAttachmentsGroupByOutputType = {
    id: number
    filename: string
    url: string
    emailSentId: number
    _count: CampaignAttachmentsCountAggregateOutputType | null
    _avg: CampaignAttachmentsAvgAggregateOutputType | null
    _sum: CampaignAttachmentsSumAggregateOutputType | null
    _min: CampaignAttachmentsMinAggregateOutputType | null
    _max: CampaignAttachmentsMaxAggregateOutputType | null
  }

  type GetCampaignAttachmentsGroupByPayload<T extends CampaignAttachmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignAttachmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignAttachmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignAttachmentsGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignAttachmentsGroupByOutputType[P]>
        }
      >
    >


  export type CampaignAttachmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    url?: boolean
    emailSentId?: boolean
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaignAttachments"]>

  export type CampaignAttachmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    url?: boolean
    emailSentId?: boolean
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaignAttachments"]>

  export type CampaignAttachmentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    url?: boolean
    emailSentId?: boolean
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaignAttachments"]>

  export type CampaignAttachmentsSelectScalar = {
    id?: boolean
    filename?: boolean
    url?: boolean
    emailSentId?: boolean
  }

  export type CampaignAttachmentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "url" | "emailSentId", ExtArgs["result"]["campaignAttachments"]>
  export type CampaignAttachmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }
  export type CampaignAttachmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }
  export type CampaignAttachmentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }

  export type $CampaignAttachmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CampaignAttachments"
    objects: {
      emailSent: Prisma.$EmailSentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      filename: string
      url: string
      emailSentId: number
    }, ExtArgs["result"]["campaignAttachments"]>
    composites: {}
  }

  type CampaignAttachmentsGetPayload<S extends boolean | null | undefined | CampaignAttachmentsDefaultArgs> = $Result.GetResult<Prisma.$CampaignAttachmentsPayload, S>

  type CampaignAttachmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CampaignAttachmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CampaignAttachmentsCountAggregateInputType | true
    }

  export interface CampaignAttachmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CampaignAttachments'], meta: { name: 'CampaignAttachments' } }
    /**
     * Find zero or one CampaignAttachments that matches the filter.
     * @param {CampaignAttachmentsFindUniqueArgs} args - Arguments to find a CampaignAttachments
     * @example
     * // Get one CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignAttachmentsFindUniqueArgs>(args: SelectSubset<T, CampaignAttachmentsFindUniqueArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CampaignAttachments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CampaignAttachmentsFindUniqueOrThrowArgs} args - Arguments to find a CampaignAttachments
     * @example
     * // Get one CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignAttachmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignAttachmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CampaignAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAttachmentsFindFirstArgs} args - Arguments to find a CampaignAttachments
     * @example
     * // Get one CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignAttachmentsFindFirstArgs>(args?: SelectSubset<T, CampaignAttachmentsFindFirstArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CampaignAttachments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAttachmentsFindFirstOrThrowArgs} args - Arguments to find a CampaignAttachments
     * @example
     * // Get one CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignAttachmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignAttachmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CampaignAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAttachmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.findMany()
     * 
     * // Get first 10 CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignAttachmentsWithIdOnly = await prisma.campaignAttachments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignAttachmentsFindManyArgs>(args?: SelectSubset<T, CampaignAttachmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CampaignAttachments.
     * @param {CampaignAttachmentsCreateArgs} args - Arguments to create a CampaignAttachments.
     * @example
     * // Create one CampaignAttachments
     * const CampaignAttachments = await prisma.campaignAttachments.create({
     *   data: {
     *     // ... data to create a CampaignAttachments
     *   }
     * })
     * 
     */
    create<T extends CampaignAttachmentsCreateArgs>(args: SelectSubset<T, CampaignAttachmentsCreateArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CampaignAttachments.
     * @param {CampaignAttachmentsCreateManyArgs} args - Arguments to create many CampaignAttachments.
     * @example
     * // Create many CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignAttachmentsCreateManyArgs>(args?: SelectSubset<T, CampaignAttachmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CampaignAttachments and returns the data saved in the database.
     * @param {CampaignAttachmentsCreateManyAndReturnArgs} args - Arguments to create many CampaignAttachments.
     * @example
     * // Create many CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CampaignAttachments and only return the `id`
     * const campaignAttachmentsWithIdOnly = await prisma.campaignAttachments.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignAttachmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignAttachmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CampaignAttachments.
     * @param {CampaignAttachmentsDeleteArgs} args - Arguments to delete one CampaignAttachments.
     * @example
     * // Delete one CampaignAttachments
     * const CampaignAttachments = await prisma.campaignAttachments.delete({
     *   where: {
     *     // ... filter to delete one CampaignAttachments
     *   }
     * })
     * 
     */
    delete<T extends CampaignAttachmentsDeleteArgs>(args: SelectSubset<T, CampaignAttachmentsDeleteArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CampaignAttachments.
     * @param {CampaignAttachmentsUpdateArgs} args - Arguments to update one CampaignAttachments.
     * @example
     * // Update one CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignAttachmentsUpdateArgs>(args: SelectSubset<T, CampaignAttachmentsUpdateArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CampaignAttachments.
     * @param {CampaignAttachmentsDeleteManyArgs} args - Arguments to filter CampaignAttachments to delete.
     * @example
     * // Delete a few CampaignAttachments
     * const { count } = await prisma.campaignAttachments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignAttachmentsDeleteManyArgs>(args?: SelectSubset<T, CampaignAttachmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CampaignAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAttachmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignAttachmentsUpdateManyArgs>(args: SelectSubset<T, CampaignAttachmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CampaignAttachments and returns the data updated in the database.
     * @param {CampaignAttachmentsUpdateManyAndReturnArgs} args - Arguments to update many CampaignAttachments.
     * @example
     * // Update many CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CampaignAttachments and only return the `id`
     * const campaignAttachmentsWithIdOnly = await prisma.campaignAttachments.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CampaignAttachmentsUpdateManyAndReturnArgs>(args: SelectSubset<T, CampaignAttachmentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CampaignAttachments.
     * @param {CampaignAttachmentsUpsertArgs} args - Arguments to update or create a CampaignAttachments.
     * @example
     * // Update or create a CampaignAttachments
     * const campaignAttachments = await prisma.campaignAttachments.upsert({
     *   create: {
     *     // ... data to create a CampaignAttachments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CampaignAttachments we want to update
     *   }
     * })
     */
    upsert<T extends CampaignAttachmentsUpsertArgs>(args: SelectSubset<T, CampaignAttachmentsUpsertArgs<ExtArgs>>): Prisma__CampaignAttachmentsClient<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CampaignAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAttachmentsCountArgs} args - Arguments to filter CampaignAttachments to count.
     * @example
     * // Count the number of CampaignAttachments
     * const count = await prisma.campaignAttachments.count({
     *   where: {
     *     // ... the filter for the CampaignAttachments we want to count
     *   }
     * })
    **/
    count<T extends CampaignAttachmentsCountArgs>(
      args?: Subset<T, CampaignAttachmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignAttachmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CampaignAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAttachmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAttachmentsAggregateArgs>(args: Subset<T, CampaignAttachmentsAggregateArgs>): Prisma.PrismaPromise<GetCampaignAttachmentsAggregateType<T>>

    /**
     * Group by CampaignAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAttachmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignAttachmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignAttachmentsGroupByArgs['orderBy'] }
        : { orderBy?: CampaignAttachmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignAttachmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignAttachmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CampaignAttachments model
   */
  readonly fields: CampaignAttachmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CampaignAttachments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignAttachmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    emailSent<T extends EmailSentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailSentDefaultArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CampaignAttachments model
   */
  interface CampaignAttachmentsFieldRefs {
    readonly id: FieldRef<"CampaignAttachments", 'Int'>
    readonly filename: FieldRef<"CampaignAttachments", 'String'>
    readonly url: FieldRef<"CampaignAttachments", 'String'>
    readonly emailSentId: FieldRef<"CampaignAttachments", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CampaignAttachments findUnique
   */
  export type CampaignAttachmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * Filter, which CampaignAttachments to fetch.
     */
    where: CampaignAttachmentsWhereUniqueInput
  }

  /**
   * CampaignAttachments findUniqueOrThrow
   */
  export type CampaignAttachmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * Filter, which CampaignAttachments to fetch.
     */
    where: CampaignAttachmentsWhereUniqueInput
  }

  /**
   * CampaignAttachments findFirst
   */
  export type CampaignAttachmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * Filter, which CampaignAttachments to fetch.
     */
    where?: CampaignAttachmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignAttachments to fetch.
     */
    orderBy?: CampaignAttachmentsOrderByWithRelationInput | CampaignAttachmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CampaignAttachments.
     */
    cursor?: CampaignAttachmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CampaignAttachments.
     */
    distinct?: CampaignAttachmentsScalarFieldEnum | CampaignAttachmentsScalarFieldEnum[]
  }

  /**
   * CampaignAttachments findFirstOrThrow
   */
  export type CampaignAttachmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * Filter, which CampaignAttachments to fetch.
     */
    where?: CampaignAttachmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignAttachments to fetch.
     */
    orderBy?: CampaignAttachmentsOrderByWithRelationInput | CampaignAttachmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CampaignAttachments.
     */
    cursor?: CampaignAttachmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CampaignAttachments.
     */
    distinct?: CampaignAttachmentsScalarFieldEnum | CampaignAttachmentsScalarFieldEnum[]
  }

  /**
   * CampaignAttachments findMany
   */
  export type CampaignAttachmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * Filter, which CampaignAttachments to fetch.
     */
    where?: CampaignAttachmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignAttachments to fetch.
     */
    orderBy?: CampaignAttachmentsOrderByWithRelationInput | CampaignAttachmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CampaignAttachments.
     */
    cursor?: CampaignAttachmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignAttachments.
     */
    skip?: number
    distinct?: CampaignAttachmentsScalarFieldEnum | CampaignAttachmentsScalarFieldEnum[]
  }

  /**
   * CampaignAttachments create
   */
  export type CampaignAttachmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a CampaignAttachments.
     */
    data: XOR<CampaignAttachmentsCreateInput, CampaignAttachmentsUncheckedCreateInput>
  }

  /**
   * CampaignAttachments createMany
   */
  export type CampaignAttachmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CampaignAttachments.
     */
    data: CampaignAttachmentsCreateManyInput | CampaignAttachmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CampaignAttachments createManyAndReturn
   */
  export type CampaignAttachmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * The data used to create many CampaignAttachments.
     */
    data: CampaignAttachmentsCreateManyInput | CampaignAttachmentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CampaignAttachments update
   */
  export type CampaignAttachmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a CampaignAttachments.
     */
    data: XOR<CampaignAttachmentsUpdateInput, CampaignAttachmentsUncheckedUpdateInput>
    /**
     * Choose, which CampaignAttachments to update.
     */
    where: CampaignAttachmentsWhereUniqueInput
  }

  /**
   * CampaignAttachments updateMany
   */
  export type CampaignAttachmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CampaignAttachments.
     */
    data: XOR<CampaignAttachmentsUpdateManyMutationInput, CampaignAttachmentsUncheckedUpdateManyInput>
    /**
     * Filter which CampaignAttachments to update
     */
    where?: CampaignAttachmentsWhereInput
    /**
     * Limit how many CampaignAttachments to update.
     */
    limit?: number
  }

  /**
   * CampaignAttachments updateManyAndReturn
   */
  export type CampaignAttachmentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * The data used to update CampaignAttachments.
     */
    data: XOR<CampaignAttachmentsUpdateManyMutationInput, CampaignAttachmentsUncheckedUpdateManyInput>
    /**
     * Filter which CampaignAttachments to update
     */
    where?: CampaignAttachmentsWhereInput
    /**
     * Limit how many CampaignAttachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CampaignAttachments upsert
   */
  export type CampaignAttachmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the CampaignAttachments to update in case it exists.
     */
    where: CampaignAttachmentsWhereUniqueInput
    /**
     * In case the CampaignAttachments found by the `where` argument doesn't exist, create a new CampaignAttachments with this data.
     */
    create: XOR<CampaignAttachmentsCreateInput, CampaignAttachmentsUncheckedCreateInput>
    /**
     * In case the CampaignAttachments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignAttachmentsUpdateInput, CampaignAttachmentsUncheckedUpdateInput>
  }

  /**
   * CampaignAttachments delete
   */
  export type CampaignAttachmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    /**
     * Filter which CampaignAttachments to delete.
     */
    where: CampaignAttachmentsWhereUniqueInput
  }

  /**
   * CampaignAttachments deleteMany
   */
  export type CampaignAttachmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CampaignAttachments to delete
     */
    where?: CampaignAttachmentsWhereInput
    /**
     * Limit how many CampaignAttachments to delete.
     */
    limit?: number
  }

  /**
   * CampaignAttachments without action
   */
  export type CampaignAttachmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
  }


  /**
   * Model EmailSent
   */

  export type AggregateEmailSent = {
    _count: EmailSentCountAggregateOutputType | null
    _avg: EmailSentAvgAggregateOutputType | null
    _sum: EmailSentSumAggregateOutputType | null
    _min: EmailSentMinAggregateOutputType | null
    _max: EmailSentMaxAggregateOutputType | null
  }

  export type EmailSentAvgAggregateOutputType = {
    id: number | null
    campaignId: number | null
    order: number | null
    sendAfterDays: number | null
  }

  export type EmailSentSumAggregateOutputType = {
    id: number | null
    campaignId: number | null
    order: number | null
    sendAfterDays: number | null
  }

  export type EmailSentMinAggregateOutputType = {
    id: number | null
    campaignId: number | null
    subject: string | null
    body: string | null
    order: number | null
    sendAfterDays: number | null
    status: $Enums.EmailStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailSentMaxAggregateOutputType = {
    id: number | null
    campaignId: number | null
    subject: string | null
    body: string | null
    order: number | null
    sendAfterDays: number | null
    status: $Enums.EmailStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailSentCountAggregateOutputType = {
    id: number
    campaignId: number
    subject: number
    body: number
    order: number
    sendAfterDays: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailSentAvgAggregateInputType = {
    id?: true
    campaignId?: true
    order?: true
    sendAfterDays?: true
  }

  export type EmailSentSumAggregateInputType = {
    id?: true
    campaignId?: true
    order?: true
    sendAfterDays?: true
  }

  export type EmailSentMinAggregateInputType = {
    id?: true
    campaignId?: true
    subject?: true
    body?: true
    order?: true
    sendAfterDays?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailSentMaxAggregateInputType = {
    id?: true
    campaignId?: true
    subject?: true
    body?: true
    order?: true
    sendAfterDays?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailSentCountAggregateInputType = {
    id?: true
    campaignId?: true
    subject?: true
    body?: true
    order?: true
    sendAfterDays?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailSentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailSent to aggregate.
     */
    where?: EmailSentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSents to fetch.
     */
    orderBy?: EmailSentOrderByWithRelationInput | EmailSentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailSentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailSents
    **/
    _count?: true | EmailSentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailSentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailSentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailSentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailSentMaxAggregateInputType
  }

  export type GetEmailSentAggregateType<T extends EmailSentAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailSent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailSent[P]>
      : GetScalarType<T[P], AggregateEmailSent[P]>
  }




  export type EmailSentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailSentWhereInput
    orderBy?: EmailSentOrderByWithAggregationInput | EmailSentOrderByWithAggregationInput[]
    by: EmailSentScalarFieldEnum[] | EmailSentScalarFieldEnum
    having?: EmailSentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailSentCountAggregateInputType | true
    _avg?: EmailSentAvgAggregateInputType
    _sum?: EmailSentSumAggregateInputType
    _min?: EmailSentMinAggregateInputType
    _max?: EmailSentMaxAggregateInputType
  }

  export type EmailSentGroupByOutputType = {
    id: number
    campaignId: number
    subject: string
    body: string
    order: number | null
    sendAfterDays: number | null
    status: $Enums.EmailStatus
    createdAt: Date
    updatedAt: Date
    _count: EmailSentCountAggregateOutputType | null
    _avg: EmailSentAvgAggregateOutputType | null
    _sum: EmailSentSumAggregateOutputType | null
    _min: EmailSentMinAggregateOutputType | null
    _max: EmailSentMaxAggregateOutputType | null
  }

  type GetEmailSentGroupByPayload<T extends EmailSentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailSentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailSentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailSentGroupByOutputType[P]>
            : GetScalarType<T[P], EmailSentGroupByOutputType[P]>
        }
      >
    >


  export type EmailSentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    subject?: boolean
    body?: boolean
    order?: boolean
    sendAfterDays?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    campaignAttachments?: boolean | EmailSent$campaignAttachmentsArgs<ExtArgs>
    leadEmailStatus?: boolean | EmailSent$leadEmailStatusArgs<ExtArgs>
    _count?: boolean | EmailSentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailSent"]>

  export type EmailSentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    subject?: boolean
    body?: boolean
    order?: boolean
    sendAfterDays?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailSent"]>

  export type EmailSentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    subject?: boolean
    body?: boolean
    order?: boolean
    sendAfterDays?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailSent"]>

  export type EmailSentSelectScalar = {
    id?: boolean
    campaignId?: boolean
    subject?: boolean
    body?: boolean
    order?: boolean
    sendAfterDays?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailSentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "campaignId" | "subject" | "body" | "order" | "sendAfterDays" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["emailSent"]>
  export type EmailSentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    campaignAttachments?: boolean | EmailSent$campaignAttachmentsArgs<ExtArgs>
    leadEmailStatus?: boolean | EmailSent$leadEmailStatusArgs<ExtArgs>
    _count?: boolean | EmailSentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailSentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type EmailSentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $EmailSentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailSent"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
      campaignAttachments: Prisma.$CampaignAttachmentsPayload<ExtArgs>[]
      leadEmailStatus: Prisma.$LeadEmailStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      campaignId: number
      subject: string
      body: string
      order: number | null
      sendAfterDays: number | null
      status: $Enums.EmailStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailSent"]>
    composites: {}
  }

  type EmailSentGetPayload<S extends boolean | null | undefined | EmailSentDefaultArgs> = $Result.GetResult<Prisma.$EmailSentPayload, S>

  type EmailSentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailSentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailSentCountAggregateInputType | true
    }

  export interface EmailSentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailSent'], meta: { name: 'EmailSent' } }
    /**
     * Find zero or one EmailSent that matches the filter.
     * @param {EmailSentFindUniqueArgs} args - Arguments to find a EmailSent
     * @example
     * // Get one EmailSent
     * const emailSent = await prisma.emailSent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailSentFindUniqueArgs>(args: SelectSubset<T, EmailSentFindUniqueArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailSent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailSentFindUniqueOrThrowArgs} args - Arguments to find a EmailSent
     * @example
     * // Get one EmailSent
     * const emailSent = await prisma.emailSent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailSentFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailSentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailSent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSentFindFirstArgs} args - Arguments to find a EmailSent
     * @example
     * // Get one EmailSent
     * const emailSent = await prisma.emailSent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailSentFindFirstArgs>(args?: SelectSubset<T, EmailSentFindFirstArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailSent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSentFindFirstOrThrowArgs} args - Arguments to find a EmailSent
     * @example
     * // Get one EmailSent
     * const emailSent = await prisma.emailSent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailSentFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailSentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailSents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailSents
     * const emailSents = await prisma.emailSent.findMany()
     * 
     * // Get first 10 EmailSents
     * const emailSents = await prisma.emailSent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailSentWithIdOnly = await prisma.emailSent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailSentFindManyArgs>(args?: SelectSubset<T, EmailSentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailSent.
     * @param {EmailSentCreateArgs} args - Arguments to create a EmailSent.
     * @example
     * // Create one EmailSent
     * const EmailSent = await prisma.emailSent.create({
     *   data: {
     *     // ... data to create a EmailSent
     *   }
     * })
     * 
     */
    create<T extends EmailSentCreateArgs>(args: SelectSubset<T, EmailSentCreateArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailSents.
     * @param {EmailSentCreateManyArgs} args - Arguments to create many EmailSents.
     * @example
     * // Create many EmailSents
     * const emailSent = await prisma.emailSent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailSentCreateManyArgs>(args?: SelectSubset<T, EmailSentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailSents and returns the data saved in the database.
     * @param {EmailSentCreateManyAndReturnArgs} args - Arguments to create many EmailSents.
     * @example
     * // Create many EmailSents
     * const emailSent = await prisma.emailSent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailSents and only return the `id`
     * const emailSentWithIdOnly = await prisma.emailSent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailSentCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailSentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailSent.
     * @param {EmailSentDeleteArgs} args - Arguments to delete one EmailSent.
     * @example
     * // Delete one EmailSent
     * const EmailSent = await prisma.emailSent.delete({
     *   where: {
     *     // ... filter to delete one EmailSent
     *   }
     * })
     * 
     */
    delete<T extends EmailSentDeleteArgs>(args: SelectSubset<T, EmailSentDeleteArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailSent.
     * @param {EmailSentUpdateArgs} args - Arguments to update one EmailSent.
     * @example
     * // Update one EmailSent
     * const emailSent = await prisma.emailSent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailSentUpdateArgs>(args: SelectSubset<T, EmailSentUpdateArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailSents.
     * @param {EmailSentDeleteManyArgs} args - Arguments to filter EmailSents to delete.
     * @example
     * // Delete a few EmailSents
     * const { count } = await prisma.emailSent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailSentDeleteManyArgs>(args?: SelectSubset<T, EmailSentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailSents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailSents
     * const emailSent = await prisma.emailSent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailSentUpdateManyArgs>(args: SelectSubset<T, EmailSentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailSents and returns the data updated in the database.
     * @param {EmailSentUpdateManyAndReturnArgs} args - Arguments to update many EmailSents.
     * @example
     * // Update many EmailSents
     * const emailSent = await prisma.emailSent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailSents and only return the `id`
     * const emailSentWithIdOnly = await prisma.emailSent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailSentUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailSentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailSent.
     * @param {EmailSentUpsertArgs} args - Arguments to update or create a EmailSent.
     * @example
     * // Update or create a EmailSent
     * const emailSent = await prisma.emailSent.upsert({
     *   create: {
     *     // ... data to create a EmailSent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailSent we want to update
     *   }
     * })
     */
    upsert<T extends EmailSentUpsertArgs>(args: SelectSubset<T, EmailSentUpsertArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailSents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSentCountArgs} args - Arguments to filter EmailSents to count.
     * @example
     * // Count the number of EmailSents
     * const count = await prisma.emailSent.count({
     *   where: {
     *     // ... the filter for the EmailSents we want to count
     *   }
     * })
    **/
    count<T extends EmailSentCountArgs>(
      args?: Subset<T, EmailSentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailSentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailSent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailSentAggregateArgs>(args: Subset<T, EmailSentAggregateArgs>): Prisma.PrismaPromise<GetEmailSentAggregateType<T>>

    /**
     * Group by EmailSent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailSentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailSentGroupByArgs['orderBy'] }
        : { orderBy?: EmailSentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailSentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailSentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailSent model
   */
  readonly fields: EmailSentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailSent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailSentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    campaignAttachments<T extends EmailSent$campaignAttachmentsArgs<ExtArgs> = {}>(args?: Subset<T, EmailSent$campaignAttachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignAttachmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leadEmailStatus<T extends EmailSent$leadEmailStatusArgs<ExtArgs> = {}>(args?: Subset<T, EmailSent$leadEmailStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailSent model
   */
  interface EmailSentFieldRefs {
    readonly id: FieldRef<"EmailSent", 'Int'>
    readonly campaignId: FieldRef<"EmailSent", 'Int'>
    readonly subject: FieldRef<"EmailSent", 'String'>
    readonly body: FieldRef<"EmailSent", 'String'>
    readonly order: FieldRef<"EmailSent", 'Int'>
    readonly sendAfterDays: FieldRef<"EmailSent", 'Int'>
    readonly status: FieldRef<"EmailSent", 'EmailStatus'>
    readonly createdAt: FieldRef<"EmailSent", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailSent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailSent findUnique
   */
  export type EmailSentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * Filter, which EmailSent to fetch.
     */
    where: EmailSentWhereUniqueInput
  }

  /**
   * EmailSent findUniqueOrThrow
   */
  export type EmailSentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * Filter, which EmailSent to fetch.
     */
    where: EmailSentWhereUniqueInput
  }

  /**
   * EmailSent findFirst
   */
  export type EmailSentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * Filter, which EmailSent to fetch.
     */
    where?: EmailSentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSents to fetch.
     */
    orderBy?: EmailSentOrderByWithRelationInput | EmailSentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSents.
     */
    cursor?: EmailSentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSents.
     */
    distinct?: EmailSentScalarFieldEnum | EmailSentScalarFieldEnum[]
  }

  /**
   * EmailSent findFirstOrThrow
   */
  export type EmailSentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * Filter, which EmailSent to fetch.
     */
    where?: EmailSentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSents to fetch.
     */
    orderBy?: EmailSentOrderByWithRelationInput | EmailSentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSents.
     */
    cursor?: EmailSentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSents.
     */
    distinct?: EmailSentScalarFieldEnum | EmailSentScalarFieldEnum[]
  }

  /**
   * EmailSent findMany
   */
  export type EmailSentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * Filter, which EmailSents to fetch.
     */
    where?: EmailSentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSents to fetch.
     */
    orderBy?: EmailSentOrderByWithRelationInput | EmailSentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailSents.
     */
    cursor?: EmailSentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSents.
     */
    skip?: number
    distinct?: EmailSentScalarFieldEnum | EmailSentScalarFieldEnum[]
  }

  /**
   * EmailSent create
   */
  export type EmailSentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailSent.
     */
    data: XOR<EmailSentCreateInput, EmailSentUncheckedCreateInput>
  }

  /**
   * EmailSent createMany
   */
  export type EmailSentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailSents.
     */
    data: EmailSentCreateManyInput | EmailSentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailSent createManyAndReturn
   */
  export type EmailSentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * The data used to create many EmailSents.
     */
    data: EmailSentCreateManyInput | EmailSentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailSent update
   */
  export type EmailSentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailSent.
     */
    data: XOR<EmailSentUpdateInput, EmailSentUncheckedUpdateInput>
    /**
     * Choose, which EmailSent to update.
     */
    where: EmailSentWhereUniqueInput
  }

  /**
   * EmailSent updateMany
   */
  export type EmailSentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailSents.
     */
    data: XOR<EmailSentUpdateManyMutationInput, EmailSentUncheckedUpdateManyInput>
    /**
     * Filter which EmailSents to update
     */
    where?: EmailSentWhereInput
    /**
     * Limit how many EmailSents to update.
     */
    limit?: number
  }

  /**
   * EmailSent updateManyAndReturn
   */
  export type EmailSentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * The data used to update EmailSents.
     */
    data: XOR<EmailSentUpdateManyMutationInput, EmailSentUncheckedUpdateManyInput>
    /**
     * Filter which EmailSents to update
     */
    where?: EmailSentWhereInput
    /**
     * Limit how many EmailSents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailSent upsert
   */
  export type EmailSentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailSent to update in case it exists.
     */
    where: EmailSentWhereUniqueInput
    /**
     * In case the EmailSent found by the `where` argument doesn't exist, create a new EmailSent with this data.
     */
    create: XOR<EmailSentCreateInput, EmailSentUncheckedCreateInput>
    /**
     * In case the EmailSent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailSentUpdateInput, EmailSentUncheckedUpdateInput>
  }

  /**
   * EmailSent delete
   */
  export type EmailSentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
    /**
     * Filter which EmailSent to delete.
     */
    where: EmailSentWhereUniqueInput
  }

  /**
   * EmailSent deleteMany
   */
  export type EmailSentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailSents to delete
     */
    where?: EmailSentWhereInput
    /**
     * Limit how many EmailSents to delete.
     */
    limit?: number
  }

  /**
   * EmailSent.campaignAttachments
   */
  export type EmailSent$campaignAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignAttachments
     */
    select?: CampaignAttachmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignAttachments
     */
    omit?: CampaignAttachmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignAttachmentsInclude<ExtArgs> | null
    where?: CampaignAttachmentsWhereInput
    orderBy?: CampaignAttachmentsOrderByWithRelationInput | CampaignAttachmentsOrderByWithRelationInput[]
    cursor?: CampaignAttachmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignAttachmentsScalarFieldEnum | CampaignAttachmentsScalarFieldEnum[]
  }

  /**
   * EmailSent.leadEmailStatus
   */
  export type EmailSent$leadEmailStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    where?: LeadEmailStatusWhereInput
    orderBy?: LeadEmailStatusOrderByWithRelationInput | LeadEmailStatusOrderByWithRelationInput[]
    cursor?: LeadEmailStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadEmailStatusScalarFieldEnum | LeadEmailStatusScalarFieldEnum[]
  }

  /**
   * EmailSent without action
   */
  export type EmailSentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSent
     */
    select?: EmailSentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSent
     */
    omit?: EmailSentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSentInclude<ExtArgs> | null
  }


  /**
   * Model LeadEmailStatus
   */

  export type AggregateLeadEmailStatus = {
    _count: LeadEmailStatusCountAggregateOutputType | null
    _avg: LeadEmailStatusAvgAggregateOutputType | null
    _sum: LeadEmailStatusSumAggregateOutputType | null
    _min: LeadEmailStatusMinAggregateOutputType | null
    _max: LeadEmailStatusMaxAggregateOutputType | null
  }

  export type LeadEmailStatusAvgAggregateOutputType = {
    id: number | null
    leadId: number | null
    emailSentId: number | null
  }

  export type LeadEmailStatusSumAggregateOutputType = {
    id: number | null
    leadId: number | null
    emailSentId: number | null
  }

  export type LeadEmailStatusMinAggregateOutputType = {
    id: number | null
    leadId: number | null
    emailSentId: number | null
    status: $Enums.EmailStatus | null
    sentAt: Date | null
  }

  export type LeadEmailStatusMaxAggregateOutputType = {
    id: number | null
    leadId: number | null
    emailSentId: number | null
    status: $Enums.EmailStatus | null
    sentAt: Date | null
  }

  export type LeadEmailStatusCountAggregateOutputType = {
    id: number
    leadId: number
    emailSentId: number
    status: number
    sentAt: number
    _all: number
  }


  export type LeadEmailStatusAvgAggregateInputType = {
    id?: true
    leadId?: true
    emailSentId?: true
  }

  export type LeadEmailStatusSumAggregateInputType = {
    id?: true
    leadId?: true
    emailSentId?: true
  }

  export type LeadEmailStatusMinAggregateInputType = {
    id?: true
    leadId?: true
    emailSentId?: true
    status?: true
    sentAt?: true
  }

  export type LeadEmailStatusMaxAggregateInputType = {
    id?: true
    leadId?: true
    emailSentId?: true
    status?: true
    sentAt?: true
  }

  export type LeadEmailStatusCountAggregateInputType = {
    id?: true
    leadId?: true
    emailSentId?: true
    status?: true
    sentAt?: true
    _all?: true
  }

  export type LeadEmailStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadEmailStatus to aggregate.
     */
    where?: LeadEmailStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadEmailStatuses to fetch.
     */
    orderBy?: LeadEmailStatusOrderByWithRelationInput | LeadEmailStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadEmailStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadEmailStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadEmailStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadEmailStatuses
    **/
    _count?: true | LeadEmailStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadEmailStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadEmailStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadEmailStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadEmailStatusMaxAggregateInputType
  }

  export type GetLeadEmailStatusAggregateType<T extends LeadEmailStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadEmailStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadEmailStatus[P]>
      : GetScalarType<T[P], AggregateLeadEmailStatus[P]>
  }




  export type LeadEmailStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadEmailStatusWhereInput
    orderBy?: LeadEmailStatusOrderByWithAggregationInput | LeadEmailStatusOrderByWithAggregationInput[]
    by: LeadEmailStatusScalarFieldEnum[] | LeadEmailStatusScalarFieldEnum
    having?: LeadEmailStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadEmailStatusCountAggregateInputType | true
    _avg?: LeadEmailStatusAvgAggregateInputType
    _sum?: LeadEmailStatusSumAggregateInputType
    _min?: LeadEmailStatusMinAggregateInputType
    _max?: LeadEmailStatusMaxAggregateInputType
  }

  export type LeadEmailStatusGroupByOutputType = {
    id: number
    leadId: number
    emailSentId: number
    status: $Enums.EmailStatus
    sentAt: Date | null
    _count: LeadEmailStatusCountAggregateOutputType | null
    _avg: LeadEmailStatusAvgAggregateOutputType | null
    _sum: LeadEmailStatusSumAggregateOutputType | null
    _min: LeadEmailStatusMinAggregateOutputType | null
    _max: LeadEmailStatusMaxAggregateOutputType | null
  }

  type GetLeadEmailStatusGroupByPayload<T extends LeadEmailStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadEmailStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadEmailStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadEmailStatusGroupByOutputType[P]>
            : GetScalarType<T[P], LeadEmailStatusGroupByOutputType[P]>
        }
      >
    >


  export type LeadEmailStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    emailSentId?: boolean
    status?: boolean
    sentAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadEmailStatus"]>

  export type LeadEmailStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    emailSentId?: boolean
    status?: boolean
    sentAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadEmailStatus"]>

  export type LeadEmailStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    emailSentId?: boolean
    status?: boolean
    sentAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadEmailStatus"]>

  export type LeadEmailStatusSelectScalar = {
    id?: boolean
    leadId?: boolean
    emailSentId?: boolean
    status?: boolean
    sentAt?: boolean
  }

  export type LeadEmailStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leadId" | "emailSentId" | "status" | "sentAt", ExtArgs["result"]["leadEmailStatus"]>
  export type LeadEmailStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }
  export type LeadEmailStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }
  export type LeadEmailStatusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    emailSent?: boolean | EmailSentDefaultArgs<ExtArgs>
  }

  export type $LeadEmailStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadEmailStatus"
    objects: {
      lead: Prisma.$LeadPayload<ExtArgs>
      emailSent: Prisma.$EmailSentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      leadId: number
      emailSentId: number
      status: $Enums.EmailStatus
      sentAt: Date | null
    }, ExtArgs["result"]["leadEmailStatus"]>
    composites: {}
  }

  type LeadEmailStatusGetPayload<S extends boolean | null | undefined | LeadEmailStatusDefaultArgs> = $Result.GetResult<Prisma.$LeadEmailStatusPayload, S>

  type LeadEmailStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeadEmailStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadEmailStatusCountAggregateInputType | true
    }

  export interface LeadEmailStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadEmailStatus'], meta: { name: 'LeadEmailStatus' } }
    /**
     * Find zero or one LeadEmailStatus that matches the filter.
     * @param {LeadEmailStatusFindUniqueArgs} args - Arguments to find a LeadEmailStatus
     * @example
     * // Get one LeadEmailStatus
     * const leadEmailStatus = await prisma.leadEmailStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadEmailStatusFindUniqueArgs>(args: SelectSubset<T, LeadEmailStatusFindUniqueArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeadEmailStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeadEmailStatusFindUniqueOrThrowArgs} args - Arguments to find a LeadEmailStatus
     * @example
     * // Get one LeadEmailStatus
     * const leadEmailStatus = await prisma.leadEmailStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadEmailStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadEmailStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadEmailStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadEmailStatusFindFirstArgs} args - Arguments to find a LeadEmailStatus
     * @example
     * // Get one LeadEmailStatus
     * const leadEmailStatus = await prisma.leadEmailStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadEmailStatusFindFirstArgs>(args?: SelectSubset<T, LeadEmailStatusFindFirstArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadEmailStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadEmailStatusFindFirstOrThrowArgs} args - Arguments to find a LeadEmailStatus
     * @example
     * // Get one LeadEmailStatus
     * const leadEmailStatus = await prisma.leadEmailStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadEmailStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadEmailStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeadEmailStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadEmailStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadEmailStatuses
     * const leadEmailStatuses = await prisma.leadEmailStatus.findMany()
     * 
     * // Get first 10 LeadEmailStatuses
     * const leadEmailStatuses = await prisma.leadEmailStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadEmailStatusWithIdOnly = await prisma.leadEmailStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadEmailStatusFindManyArgs>(args?: SelectSubset<T, LeadEmailStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeadEmailStatus.
     * @param {LeadEmailStatusCreateArgs} args - Arguments to create a LeadEmailStatus.
     * @example
     * // Create one LeadEmailStatus
     * const LeadEmailStatus = await prisma.leadEmailStatus.create({
     *   data: {
     *     // ... data to create a LeadEmailStatus
     *   }
     * })
     * 
     */
    create<T extends LeadEmailStatusCreateArgs>(args: SelectSubset<T, LeadEmailStatusCreateArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeadEmailStatuses.
     * @param {LeadEmailStatusCreateManyArgs} args - Arguments to create many LeadEmailStatuses.
     * @example
     * // Create many LeadEmailStatuses
     * const leadEmailStatus = await prisma.leadEmailStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadEmailStatusCreateManyArgs>(args?: SelectSubset<T, LeadEmailStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadEmailStatuses and returns the data saved in the database.
     * @param {LeadEmailStatusCreateManyAndReturnArgs} args - Arguments to create many LeadEmailStatuses.
     * @example
     * // Create many LeadEmailStatuses
     * const leadEmailStatus = await prisma.leadEmailStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadEmailStatuses and only return the `id`
     * const leadEmailStatusWithIdOnly = await prisma.leadEmailStatus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadEmailStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadEmailStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeadEmailStatus.
     * @param {LeadEmailStatusDeleteArgs} args - Arguments to delete one LeadEmailStatus.
     * @example
     * // Delete one LeadEmailStatus
     * const LeadEmailStatus = await prisma.leadEmailStatus.delete({
     *   where: {
     *     // ... filter to delete one LeadEmailStatus
     *   }
     * })
     * 
     */
    delete<T extends LeadEmailStatusDeleteArgs>(args: SelectSubset<T, LeadEmailStatusDeleteArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeadEmailStatus.
     * @param {LeadEmailStatusUpdateArgs} args - Arguments to update one LeadEmailStatus.
     * @example
     * // Update one LeadEmailStatus
     * const leadEmailStatus = await prisma.leadEmailStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadEmailStatusUpdateArgs>(args: SelectSubset<T, LeadEmailStatusUpdateArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeadEmailStatuses.
     * @param {LeadEmailStatusDeleteManyArgs} args - Arguments to filter LeadEmailStatuses to delete.
     * @example
     * // Delete a few LeadEmailStatuses
     * const { count } = await prisma.leadEmailStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadEmailStatusDeleteManyArgs>(args?: SelectSubset<T, LeadEmailStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadEmailStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadEmailStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadEmailStatuses
     * const leadEmailStatus = await prisma.leadEmailStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadEmailStatusUpdateManyArgs>(args: SelectSubset<T, LeadEmailStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadEmailStatuses and returns the data updated in the database.
     * @param {LeadEmailStatusUpdateManyAndReturnArgs} args - Arguments to update many LeadEmailStatuses.
     * @example
     * // Update many LeadEmailStatuses
     * const leadEmailStatus = await prisma.leadEmailStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeadEmailStatuses and only return the `id`
     * const leadEmailStatusWithIdOnly = await prisma.leadEmailStatus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeadEmailStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, LeadEmailStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeadEmailStatus.
     * @param {LeadEmailStatusUpsertArgs} args - Arguments to update or create a LeadEmailStatus.
     * @example
     * // Update or create a LeadEmailStatus
     * const leadEmailStatus = await prisma.leadEmailStatus.upsert({
     *   create: {
     *     // ... data to create a LeadEmailStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadEmailStatus we want to update
     *   }
     * })
     */
    upsert<T extends LeadEmailStatusUpsertArgs>(args: SelectSubset<T, LeadEmailStatusUpsertArgs<ExtArgs>>): Prisma__LeadEmailStatusClient<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeadEmailStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadEmailStatusCountArgs} args - Arguments to filter LeadEmailStatuses to count.
     * @example
     * // Count the number of LeadEmailStatuses
     * const count = await prisma.leadEmailStatus.count({
     *   where: {
     *     // ... the filter for the LeadEmailStatuses we want to count
     *   }
     * })
    **/
    count<T extends LeadEmailStatusCountArgs>(
      args?: Subset<T, LeadEmailStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadEmailStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadEmailStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadEmailStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadEmailStatusAggregateArgs>(args: Subset<T, LeadEmailStatusAggregateArgs>): Prisma.PrismaPromise<GetLeadEmailStatusAggregateType<T>>

    /**
     * Group by LeadEmailStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadEmailStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadEmailStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadEmailStatusGroupByArgs['orderBy'] }
        : { orderBy?: LeadEmailStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadEmailStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadEmailStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadEmailStatus model
   */
  readonly fields: LeadEmailStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadEmailStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadEmailStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    emailSent<T extends EmailSentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailSentDefaultArgs<ExtArgs>>): Prisma__EmailSentClient<$Result.GetResult<Prisma.$EmailSentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadEmailStatus model
   */
  interface LeadEmailStatusFieldRefs {
    readonly id: FieldRef<"LeadEmailStatus", 'Int'>
    readonly leadId: FieldRef<"LeadEmailStatus", 'Int'>
    readonly emailSentId: FieldRef<"LeadEmailStatus", 'Int'>
    readonly status: FieldRef<"LeadEmailStatus", 'EmailStatus'>
    readonly sentAt: FieldRef<"LeadEmailStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeadEmailStatus findUnique
   */
  export type LeadEmailStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadEmailStatus to fetch.
     */
    where: LeadEmailStatusWhereUniqueInput
  }

  /**
   * LeadEmailStatus findUniqueOrThrow
   */
  export type LeadEmailStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadEmailStatus to fetch.
     */
    where: LeadEmailStatusWhereUniqueInput
  }

  /**
   * LeadEmailStatus findFirst
   */
  export type LeadEmailStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadEmailStatus to fetch.
     */
    where?: LeadEmailStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadEmailStatuses to fetch.
     */
    orderBy?: LeadEmailStatusOrderByWithRelationInput | LeadEmailStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadEmailStatuses.
     */
    cursor?: LeadEmailStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadEmailStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadEmailStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadEmailStatuses.
     */
    distinct?: LeadEmailStatusScalarFieldEnum | LeadEmailStatusScalarFieldEnum[]
  }

  /**
   * LeadEmailStatus findFirstOrThrow
   */
  export type LeadEmailStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadEmailStatus to fetch.
     */
    where?: LeadEmailStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadEmailStatuses to fetch.
     */
    orderBy?: LeadEmailStatusOrderByWithRelationInput | LeadEmailStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadEmailStatuses.
     */
    cursor?: LeadEmailStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadEmailStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadEmailStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadEmailStatuses.
     */
    distinct?: LeadEmailStatusScalarFieldEnum | LeadEmailStatusScalarFieldEnum[]
  }

  /**
   * LeadEmailStatus findMany
   */
  export type LeadEmailStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadEmailStatuses to fetch.
     */
    where?: LeadEmailStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadEmailStatuses to fetch.
     */
    orderBy?: LeadEmailStatusOrderByWithRelationInput | LeadEmailStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadEmailStatuses.
     */
    cursor?: LeadEmailStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadEmailStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadEmailStatuses.
     */
    skip?: number
    distinct?: LeadEmailStatusScalarFieldEnum | LeadEmailStatusScalarFieldEnum[]
  }

  /**
   * LeadEmailStatus create
   */
  export type LeadEmailStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadEmailStatus.
     */
    data: XOR<LeadEmailStatusCreateInput, LeadEmailStatusUncheckedCreateInput>
  }

  /**
   * LeadEmailStatus createMany
   */
  export type LeadEmailStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadEmailStatuses.
     */
    data: LeadEmailStatusCreateManyInput | LeadEmailStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadEmailStatus createManyAndReturn
   */
  export type LeadEmailStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * The data used to create many LeadEmailStatuses.
     */
    data: LeadEmailStatusCreateManyInput | LeadEmailStatusCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadEmailStatus update
   */
  export type LeadEmailStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadEmailStatus.
     */
    data: XOR<LeadEmailStatusUpdateInput, LeadEmailStatusUncheckedUpdateInput>
    /**
     * Choose, which LeadEmailStatus to update.
     */
    where: LeadEmailStatusWhereUniqueInput
  }

  /**
   * LeadEmailStatus updateMany
   */
  export type LeadEmailStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadEmailStatuses.
     */
    data: XOR<LeadEmailStatusUpdateManyMutationInput, LeadEmailStatusUncheckedUpdateManyInput>
    /**
     * Filter which LeadEmailStatuses to update
     */
    where?: LeadEmailStatusWhereInput
    /**
     * Limit how many LeadEmailStatuses to update.
     */
    limit?: number
  }

  /**
   * LeadEmailStatus updateManyAndReturn
   */
  export type LeadEmailStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * The data used to update LeadEmailStatuses.
     */
    data: XOR<LeadEmailStatusUpdateManyMutationInput, LeadEmailStatusUncheckedUpdateManyInput>
    /**
     * Filter which LeadEmailStatuses to update
     */
    where?: LeadEmailStatusWhereInput
    /**
     * Limit how many LeadEmailStatuses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadEmailStatus upsert
   */
  export type LeadEmailStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadEmailStatus to update in case it exists.
     */
    where: LeadEmailStatusWhereUniqueInput
    /**
     * In case the LeadEmailStatus found by the `where` argument doesn't exist, create a new LeadEmailStatus with this data.
     */
    create: XOR<LeadEmailStatusCreateInput, LeadEmailStatusUncheckedCreateInput>
    /**
     * In case the LeadEmailStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadEmailStatusUpdateInput, LeadEmailStatusUncheckedUpdateInput>
  }

  /**
   * LeadEmailStatus delete
   */
  export type LeadEmailStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    /**
     * Filter which LeadEmailStatus to delete.
     */
    where: LeadEmailStatusWhereUniqueInput
  }

  /**
   * LeadEmailStatus deleteMany
   */
  export type LeadEmailStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadEmailStatuses to delete
     */
    where?: LeadEmailStatusWhereInput
    /**
     * Limit how many LeadEmailStatuses to delete.
     */
    limit?: number
  }

  /**
   * LeadEmailStatus without action
   */
  export type LeadEmailStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
  }


  /**
   * Model Lead
   */

  export type AggregateLead = {
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  export type LeadAvgAggregateOutputType = {
    id: number | null
    campaignId: number | null
  }

  export type LeadSumAggregateOutputType = {
    id: number | null
    campaignId: number | null
  }

  export type LeadMinAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    company: string | null
    customSubject: string | null
    customBody: string | null
    shouldSend: boolean | null
    status: $Enums.LeadStatus | null
    sentAt: Date | null
    createdAt: Date | null
    campaignId: number | null
  }

  export type LeadMaxAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    company: string | null
    customSubject: string | null
    customBody: string | null
    shouldSend: boolean | null
    status: $Enums.LeadStatus | null
    sentAt: Date | null
    createdAt: Date | null
    campaignId: number | null
  }

  export type LeadCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    company: number
    customSubject: number
    customBody: number
    shouldSend: number
    status: number
    sentAt: number
    createdAt: number
    campaignId: number
    _all: number
  }


  export type LeadAvgAggregateInputType = {
    id?: true
    campaignId?: true
  }

  export type LeadSumAggregateInputType = {
    id?: true
    campaignId?: true
  }

  export type LeadMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    company?: true
    customSubject?: true
    customBody?: true
    shouldSend?: true
    status?: true
    sentAt?: true
    createdAt?: true
    campaignId?: true
  }

  export type LeadMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    company?: true
    customSubject?: true
    customBody?: true
    shouldSend?: true
    status?: true
    sentAt?: true
    createdAt?: true
    campaignId?: true
  }

  export type LeadCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    company?: true
    customSubject?: true
    customBody?: true
    shouldSend?: true
    status?: true
    sentAt?: true
    createdAt?: true
    campaignId?: true
    _all?: true
  }

  export type LeadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lead to aggregate.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leads
    **/
    _count?: true | LeadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadMaxAggregateInputType
  }

  export type GetLeadAggregateType<T extends LeadAggregateArgs> = {
        [P in keyof T & keyof AggregateLead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLead[P]>
      : GetScalarType<T[P], AggregateLead[P]>
  }




  export type LeadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithAggregationInput | LeadOrderByWithAggregationInput[]
    by: LeadScalarFieldEnum[] | LeadScalarFieldEnum
    having?: LeadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadCountAggregateInputType | true
    _avg?: LeadAvgAggregateInputType
    _sum?: LeadSumAggregateInputType
    _min?: LeadMinAggregateInputType
    _max?: LeadMaxAggregateInputType
  }

  export type LeadGroupByOutputType = {
    id: number
    email: string
    firstName: string | null
    lastName: string | null
    company: string | null
    customSubject: string | null
    customBody: string | null
    shouldSend: boolean
    status: $Enums.LeadStatus
    sentAt: Date | null
    createdAt: Date
    campaignId: number
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  type GetLeadGroupByPayload<T extends LeadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadGroupByOutputType[P]>
            : GetScalarType<T[P], LeadGroupByOutputType[P]>
        }
      >
    >


  export type LeadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    company?: boolean
    customSubject?: boolean
    customBody?: boolean
    shouldSend?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    campaignId?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    leadEmailStatuses?: boolean | Lead$leadEmailStatusesArgs<ExtArgs>
    _count?: boolean | LeadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    company?: boolean
    customSubject?: boolean
    customBody?: boolean
    shouldSend?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    campaignId?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    company?: boolean
    customSubject?: boolean
    customBody?: boolean
    shouldSend?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    campaignId?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    company?: boolean
    customSubject?: boolean
    customBody?: boolean
    shouldSend?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    campaignId?: boolean
  }

  export type LeadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "company" | "customSubject" | "customBody" | "shouldSend" | "status" | "sentAt" | "createdAt" | "campaignId", ExtArgs["result"]["lead"]>
  export type LeadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    leadEmailStatuses?: boolean | Lead$leadEmailStatusesArgs<ExtArgs>
    _count?: boolean | LeadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type LeadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $LeadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lead"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
      leadEmailStatuses: Prisma.$LeadEmailStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      firstName: string | null
      lastName: string | null
      company: string | null
      customSubject: string | null
      customBody: string | null
      shouldSend: boolean
      status: $Enums.LeadStatus
      sentAt: Date | null
      createdAt: Date
      campaignId: number
    }, ExtArgs["result"]["lead"]>
    composites: {}
  }

  type LeadGetPayload<S extends boolean | null | undefined | LeadDefaultArgs> = $Result.GetResult<Prisma.$LeadPayload, S>

  type LeadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadCountAggregateInputType | true
    }

  export interface LeadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lead'], meta: { name: 'Lead' } }
    /**
     * Find zero or one Lead that matches the filter.
     * @param {LeadFindUniqueArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadFindUniqueArgs>(args: SelectSubset<T, LeadFindUniqueArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lead that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeadFindUniqueOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadFindFirstArgs>(args?: SelectSubset<T, LeadFindFirstArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leads
     * const leads = await prisma.lead.findMany()
     * 
     * // Get first 10 Leads
     * const leads = await prisma.lead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadWithIdOnly = await prisma.lead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadFindManyArgs>(args?: SelectSubset<T, LeadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lead.
     * @param {LeadCreateArgs} args - Arguments to create a Lead.
     * @example
     * // Create one Lead
     * const Lead = await prisma.lead.create({
     *   data: {
     *     // ... data to create a Lead
     *   }
     * })
     * 
     */
    create<T extends LeadCreateArgs>(args: SelectSubset<T, LeadCreateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leads.
     * @param {LeadCreateManyArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadCreateManyArgs>(args?: SelectSubset<T, LeadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leads and returns the data saved in the database.
     * @param {LeadCreateManyAndReturnArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leads and only return the `id`
     * const leadWithIdOnly = await prisma.lead.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lead.
     * @param {LeadDeleteArgs} args - Arguments to delete one Lead.
     * @example
     * // Delete one Lead
     * const Lead = await prisma.lead.delete({
     *   where: {
     *     // ... filter to delete one Lead
     *   }
     * })
     * 
     */
    delete<T extends LeadDeleteArgs>(args: SelectSubset<T, LeadDeleteArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lead.
     * @param {LeadUpdateArgs} args - Arguments to update one Lead.
     * @example
     * // Update one Lead
     * const lead = await prisma.lead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadUpdateArgs>(args: SelectSubset<T, LeadUpdateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leads.
     * @param {LeadDeleteManyArgs} args - Arguments to filter Leads to delete.
     * @example
     * // Delete a few Leads
     * const { count } = await prisma.lead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadDeleteManyArgs>(args?: SelectSubset<T, LeadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leads
     * const lead = await prisma.lead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadUpdateManyArgs>(args: SelectSubset<T, LeadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads and returns the data updated in the database.
     * @param {LeadUpdateManyAndReturnArgs} args - Arguments to update many Leads.
     * @example
     * // Update many Leads
     * const lead = await prisma.lead.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Leads and only return the `id`
     * const leadWithIdOnly = await prisma.lead.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeadUpdateManyAndReturnArgs>(args: SelectSubset<T, LeadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lead.
     * @param {LeadUpsertArgs} args - Arguments to update or create a Lead.
     * @example
     * // Update or create a Lead
     * const lead = await prisma.lead.upsert({
     *   create: {
     *     // ... data to create a Lead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lead we want to update
     *   }
     * })
     */
    upsert<T extends LeadUpsertArgs>(args: SelectSubset<T, LeadUpsertArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadCountArgs} args - Arguments to filter Leads to count.
     * @example
     * // Count the number of Leads
     * const count = await prisma.lead.count({
     *   where: {
     *     // ... the filter for the Leads we want to count
     *   }
     * })
    **/
    count<T extends LeadCountArgs>(
      args?: Subset<T, LeadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadAggregateArgs>(args: Subset<T, LeadAggregateArgs>): Prisma.PrismaPromise<GetLeadAggregateType<T>>

    /**
     * Group by Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadGroupByArgs['orderBy'] }
        : { orderBy?: LeadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lead model
   */
  readonly fields: LeadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    leadEmailStatuses<T extends Lead$leadEmailStatusesArgs<ExtArgs> = {}>(args?: Subset<T, Lead$leadEmailStatusesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadEmailStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lead model
   */
  interface LeadFieldRefs {
    readonly id: FieldRef<"Lead", 'Int'>
    readonly email: FieldRef<"Lead", 'String'>
    readonly firstName: FieldRef<"Lead", 'String'>
    readonly lastName: FieldRef<"Lead", 'String'>
    readonly company: FieldRef<"Lead", 'String'>
    readonly customSubject: FieldRef<"Lead", 'String'>
    readonly customBody: FieldRef<"Lead", 'String'>
    readonly shouldSend: FieldRef<"Lead", 'Boolean'>
    readonly status: FieldRef<"Lead", 'LeadStatus'>
    readonly sentAt: FieldRef<"Lead", 'DateTime'>
    readonly createdAt: FieldRef<"Lead", 'DateTime'>
    readonly campaignId: FieldRef<"Lead", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lead findUnique
   */
  export type LeadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findUniqueOrThrow
   */
  export type LeadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findFirst
   */
  export type LeadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findFirstOrThrow
   */
  export type LeadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findMany
   */
  export type LeadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead create
   */
  export type LeadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The data needed to create a Lead.
     */
    data: XOR<LeadCreateInput, LeadUncheckedCreateInput>
  }

  /**
   * Lead createMany
   */
  export type LeadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lead createManyAndReturn
   */
  export type LeadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lead update
   */
  export type LeadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The data needed to update a Lead.
     */
    data: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
    /**
     * Choose, which Lead to update.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead updateMany
   */
  export type LeadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadWhereInput
    /**
     * Limit how many Leads to update.
     */
    limit?: number
  }

  /**
   * Lead updateManyAndReturn
   */
  export type LeadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadWhereInput
    /**
     * Limit how many Leads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lead upsert
   */
  export type LeadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The filter to search for the Lead to update in case it exists.
     */
    where: LeadWhereUniqueInput
    /**
     * In case the Lead found by the `where` argument doesn't exist, create a new Lead with this data.
     */
    create: XOR<LeadCreateInput, LeadUncheckedCreateInput>
    /**
     * In case the Lead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
  }

  /**
   * Lead delete
   */
  export type LeadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter which Lead to delete.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead deleteMany
   */
  export type LeadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leads to delete
     */
    where?: LeadWhereInput
    /**
     * Limit how many Leads to delete.
     */
    limit?: number
  }

  /**
   * Lead.leadEmailStatuses
   */
  export type Lead$leadEmailStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadEmailStatus
     */
    select?: LeadEmailStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadEmailStatus
     */
    omit?: LeadEmailStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadEmailStatusInclude<ExtArgs> | null
    where?: LeadEmailStatusWhereInput
    orderBy?: LeadEmailStatusOrderByWithRelationInput | LeadEmailStatusOrderByWithRelationInput[]
    cursor?: LeadEmailStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadEmailStatusScalarFieldEnum | LeadEmailStatusScalarFieldEnum[]
  }

  /**
   * Lead without action
   */
  export type LeadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    googleId: 'googleId',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry',
    googleAccessToken: 'googleAccessToken',
    googleRefreshToken: 'googleRefreshToken',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    token: 'token'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    subject: 'subject',
    body: 'body',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const CampaignAttachmentsScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    url: 'url',
    emailSentId: 'emailSentId'
  };

  export type CampaignAttachmentsScalarFieldEnum = (typeof CampaignAttachmentsScalarFieldEnum)[keyof typeof CampaignAttachmentsScalarFieldEnum]


  export const EmailSentScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    subject: 'subject',
    body: 'body',
    order: 'order',
    sendAfterDays: 'sendAfterDays',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailSentScalarFieldEnum = (typeof EmailSentScalarFieldEnum)[keyof typeof EmailSentScalarFieldEnum]


  export const LeadEmailStatusScalarFieldEnum: {
    id: 'id',
    leadId: 'leadId',
    emailSentId: 'emailSentId',
    status: 'status',
    sentAt: 'sentAt'
  };

  export type LeadEmailStatusScalarFieldEnum = (typeof LeadEmailStatusScalarFieldEnum)[keyof typeof LeadEmailStatusScalarFieldEnum]


  export const LeadScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    company: 'company',
    customSubject: 'customSubject',
    customBody: 'customBody',
    shouldSend: 'shouldSend',
    status: 'status',
    sentAt: 'sentAt',
    createdAt: 'createdAt',
    campaignId: 'campaignId'
  };

  export type LeadScalarFieldEnum = (typeof LeadScalarFieldEnum)[keyof typeof LeadScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'CampaignStatus'
   */
  export type EnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus'>
    


  /**
   * Reference to a field of type 'CampaignStatus[]'
   */
  export type ListEnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus[]'>
    


  /**
   * Reference to a field of type 'EmailStatus'
   */
  export type EnumEmailStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailStatus'>
    


  /**
   * Reference to a field of type 'EmailStatus[]'
   */
  export type ListEnumEmailStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'LeadStatus'
   */
  export type EnumLeadStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeadStatus'>
    


  /**
   * Reference to a field of type 'LeadStatus[]'
   */
  export type ListEnumLeadStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeadStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    googleAccessToken?: StringNullableFilter<"User"> | string | null
    googleRefreshToken?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    campaign?: CampaignListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    googleAccessToken?: SortOrderInput | SortOrder
    googleRefreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    campaign?: CampaignOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    googleAccessToken?: StringNullableFilter<"User"> | string | null
    googleRefreshToken?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    campaign?: CampaignListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    googleAccessToken?: SortOrderInput | SortOrder
    googleRefreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    googleAccessToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleRefreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: IntFilter<"Token"> | number
    token?: StringFilter<"Token"> | string
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    token?: StringFilter<"Token"> | string
  }, "id">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Token"> | number
    token?: StringWithAggregatesFilter<"Token"> | string
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: IntFilter<"Campaign"> | number
    name?: StringFilter<"Campaign"> | string
    userId?: IntFilter<"Campaign"> | number
    subject?: StringFilter<"Campaign"> | string
    body?: StringFilter<"Campaign"> | string
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    leads?: LeadListRelationFilter
    emailSent?: EmailSentListRelationFilter
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    leads?: LeadOrderByRelationAggregateInput
    emailSent?: EmailSentOrderByRelationAggregateInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    name?: StringFilter<"Campaign"> | string
    userId?: IntFilter<"Campaign"> | number
    subject?: StringFilter<"Campaign"> | string
    body?: StringFilter<"Campaign"> | string
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    leads?: LeadListRelationFilter
    emailSent?: EmailSentListRelationFilter
  }, "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _avg?: CampaignAvgOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
    _sum?: CampaignSumOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Campaign"> | number
    name?: StringWithAggregatesFilter<"Campaign"> | string
    userId?: IntWithAggregatesFilter<"Campaign"> | number
    subject?: StringWithAggregatesFilter<"Campaign"> | string
    body?: StringWithAggregatesFilter<"Campaign"> | string
    status?: EnumCampaignStatusWithAggregatesFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  }

  export type CampaignAttachmentsWhereInput = {
    AND?: CampaignAttachmentsWhereInput | CampaignAttachmentsWhereInput[]
    OR?: CampaignAttachmentsWhereInput[]
    NOT?: CampaignAttachmentsWhereInput | CampaignAttachmentsWhereInput[]
    id?: IntFilter<"CampaignAttachments"> | number
    filename?: StringFilter<"CampaignAttachments"> | string
    url?: StringFilter<"CampaignAttachments"> | string
    emailSentId?: IntFilter<"CampaignAttachments"> | number
    emailSent?: XOR<EmailSentScalarRelationFilter, EmailSentWhereInput>
  }

  export type CampaignAttachmentsOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    url?: SortOrder
    emailSentId?: SortOrder
    emailSent?: EmailSentOrderByWithRelationInput
  }

  export type CampaignAttachmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CampaignAttachmentsWhereInput | CampaignAttachmentsWhereInput[]
    OR?: CampaignAttachmentsWhereInput[]
    NOT?: CampaignAttachmentsWhereInput | CampaignAttachmentsWhereInput[]
    filename?: StringFilter<"CampaignAttachments"> | string
    url?: StringFilter<"CampaignAttachments"> | string
    emailSentId?: IntFilter<"CampaignAttachments"> | number
    emailSent?: XOR<EmailSentScalarRelationFilter, EmailSentWhereInput>
  }, "id">

  export type CampaignAttachmentsOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    url?: SortOrder
    emailSentId?: SortOrder
    _count?: CampaignAttachmentsCountOrderByAggregateInput
    _avg?: CampaignAttachmentsAvgOrderByAggregateInput
    _max?: CampaignAttachmentsMaxOrderByAggregateInput
    _min?: CampaignAttachmentsMinOrderByAggregateInput
    _sum?: CampaignAttachmentsSumOrderByAggregateInput
  }

  export type CampaignAttachmentsScalarWhereWithAggregatesInput = {
    AND?: CampaignAttachmentsScalarWhereWithAggregatesInput | CampaignAttachmentsScalarWhereWithAggregatesInput[]
    OR?: CampaignAttachmentsScalarWhereWithAggregatesInput[]
    NOT?: CampaignAttachmentsScalarWhereWithAggregatesInput | CampaignAttachmentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CampaignAttachments"> | number
    filename?: StringWithAggregatesFilter<"CampaignAttachments"> | string
    url?: StringWithAggregatesFilter<"CampaignAttachments"> | string
    emailSentId?: IntWithAggregatesFilter<"CampaignAttachments"> | number
  }

  export type EmailSentWhereInput = {
    AND?: EmailSentWhereInput | EmailSentWhereInput[]
    OR?: EmailSentWhereInput[]
    NOT?: EmailSentWhereInput | EmailSentWhereInput[]
    id?: IntFilter<"EmailSent"> | number
    campaignId?: IntFilter<"EmailSent"> | number
    subject?: StringFilter<"EmailSent"> | string
    body?: StringFilter<"EmailSent"> | string
    order?: IntNullableFilter<"EmailSent"> | number | null
    sendAfterDays?: IntNullableFilter<"EmailSent"> | number | null
    status?: EnumEmailStatusFilter<"EmailSent"> | $Enums.EmailStatus
    createdAt?: DateTimeFilter<"EmailSent"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSent"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    campaignAttachments?: CampaignAttachmentsListRelationFilter
    leadEmailStatus?: LeadEmailStatusListRelationFilter
  }

  export type EmailSentOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    order?: SortOrderInput | SortOrder
    sendAfterDays?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    campaignAttachments?: CampaignAttachmentsOrderByRelationAggregateInput
    leadEmailStatus?: LeadEmailStatusOrderByRelationAggregateInput
  }

  export type EmailSentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmailSentWhereInput | EmailSentWhereInput[]
    OR?: EmailSentWhereInput[]
    NOT?: EmailSentWhereInput | EmailSentWhereInput[]
    campaignId?: IntFilter<"EmailSent"> | number
    subject?: StringFilter<"EmailSent"> | string
    body?: StringFilter<"EmailSent"> | string
    order?: IntNullableFilter<"EmailSent"> | number | null
    sendAfterDays?: IntNullableFilter<"EmailSent"> | number | null
    status?: EnumEmailStatusFilter<"EmailSent"> | $Enums.EmailStatus
    createdAt?: DateTimeFilter<"EmailSent"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSent"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    campaignAttachments?: CampaignAttachmentsListRelationFilter
    leadEmailStatus?: LeadEmailStatusListRelationFilter
  }, "id">

  export type EmailSentOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    order?: SortOrderInput | SortOrder
    sendAfterDays?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailSentCountOrderByAggregateInput
    _avg?: EmailSentAvgOrderByAggregateInput
    _max?: EmailSentMaxOrderByAggregateInput
    _min?: EmailSentMinOrderByAggregateInput
    _sum?: EmailSentSumOrderByAggregateInput
  }

  export type EmailSentScalarWhereWithAggregatesInput = {
    AND?: EmailSentScalarWhereWithAggregatesInput | EmailSentScalarWhereWithAggregatesInput[]
    OR?: EmailSentScalarWhereWithAggregatesInput[]
    NOT?: EmailSentScalarWhereWithAggregatesInput | EmailSentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmailSent"> | number
    campaignId?: IntWithAggregatesFilter<"EmailSent"> | number
    subject?: StringWithAggregatesFilter<"EmailSent"> | string
    body?: StringWithAggregatesFilter<"EmailSent"> | string
    order?: IntNullableWithAggregatesFilter<"EmailSent"> | number | null
    sendAfterDays?: IntNullableWithAggregatesFilter<"EmailSent"> | number | null
    status?: EnumEmailStatusWithAggregatesFilter<"EmailSent"> | $Enums.EmailStatus
    createdAt?: DateTimeWithAggregatesFilter<"EmailSent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailSent"> | Date | string
  }

  export type LeadEmailStatusWhereInput = {
    AND?: LeadEmailStatusWhereInput | LeadEmailStatusWhereInput[]
    OR?: LeadEmailStatusWhereInput[]
    NOT?: LeadEmailStatusWhereInput | LeadEmailStatusWhereInput[]
    id?: IntFilter<"LeadEmailStatus"> | number
    leadId?: IntFilter<"LeadEmailStatus"> | number
    emailSentId?: IntFilter<"LeadEmailStatus"> | number
    status?: EnumEmailStatusFilter<"LeadEmailStatus"> | $Enums.EmailStatus
    sentAt?: DateTimeNullableFilter<"LeadEmailStatus"> | Date | string | null
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
    emailSent?: XOR<EmailSentScalarRelationFilter, EmailSentWhereInput>
  }

  export type LeadEmailStatusOrderByWithRelationInput = {
    id?: SortOrder
    leadId?: SortOrder
    emailSentId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    lead?: LeadOrderByWithRelationInput
    emailSent?: EmailSentOrderByWithRelationInput
  }

  export type LeadEmailStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    leadId_emailSentId?: LeadEmailStatusLeadIdEmailSentIdCompoundUniqueInput
    AND?: LeadEmailStatusWhereInput | LeadEmailStatusWhereInput[]
    OR?: LeadEmailStatusWhereInput[]
    NOT?: LeadEmailStatusWhereInput | LeadEmailStatusWhereInput[]
    leadId?: IntFilter<"LeadEmailStatus"> | number
    emailSentId?: IntFilter<"LeadEmailStatus"> | number
    status?: EnumEmailStatusFilter<"LeadEmailStatus"> | $Enums.EmailStatus
    sentAt?: DateTimeNullableFilter<"LeadEmailStatus"> | Date | string | null
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
    emailSent?: XOR<EmailSentScalarRelationFilter, EmailSentWhereInput>
  }, "id" | "leadId_emailSentId">

  export type LeadEmailStatusOrderByWithAggregationInput = {
    id?: SortOrder
    leadId?: SortOrder
    emailSentId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    _count?: LeadEmailStatusCountOrderByAggregateInput
    _avg?: LeadEmailStatusAvgOrderByAggregateInput
    _max?: LeadEmailStatusMaxOrderByAggregateInput
    _min?: LeadEmailStatusMinOrderByAggregateInput
    _sum?: LeadEmailStatusSumOrderByAggregateInput
  }

  export type LeadEmailStatusScalarWhereWithAggregatesInput = {
    AND?: LeadEmailStatusScalarWhereWithAggregatesInput | LeadEmailStatusScalarWhereWithAggregatesInput[]
    OR?: LeadEmailStatusScalarWhereWithAggregatesInput[]
    NOT?: LeadEmailStatusScalarWhereWithAggregatesInput | LeadEmailStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeadEmailStatus"> | number
    leadId?: IntWithAggregatesFilter<"LeadEmailStatus"> | number
    emailSentId?: IntWithAggregatesFilter<"LeadEmailStatus"> | number
    status?: EnumEmailStatusWithAggregatesFilter<"LeadEmailStatus"> | $Enums.EmailStatus
    sentAt?: DateTimeNullableWithAggregatesFilter<"LeadEmailStatus"> | Date | string | null
  }

  export type LeadWhereInput = {
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    id?: IntFilter<"Lead"> | number
    email?: StringFilter<"Lead"> | string
    firstName?: StringNullableFilter<"Lead"> | string | null
    lastName?: StringNullableFilter<"Lead"> | string | null
    company?: StringNullableFilter<"Lead"> | string | null
    customSubject?: StringNullableFilter<"Lead"> | string | null
    customBody?: StringNullableFilter<"Lead"> | string | null
    shouldSend?: BoolFilter<"Lead"> | boolean
    status?: EnumLeadStatusFilter<"Lead"> | $Enums.LeadStatus
    sentAt?: DateTimeNullableFilter<"Lead"> | Date | string | null
    createdAt?: DateTimeFilter<"Lead"> | Date | string
    campaignId?: IntFilter<"Lead"> | number
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    leadEmailStatuses?: LeadEmailStatusListRelationFilter
  }

  export type LeadOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    customSubject?: SortOrderInput | SortOrder
    customBody?: SortOrderInput | SortOrder
    shouldSend?: SortOrder
    status?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    campaignId?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    leadEmailStatuses?: LeadEmailStatusOrderByRelationAggregateInput
  }

  export type LeadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    email?: StringFilter<"Lead"> | string
    firstName?: StringNullableFilter<"Lead"> | string | null
    lastName?: StringNullableFilter<"Lead"> | string | null
    company?: StringNullableFilter<"Lead"> | string | null
    customSubject?: StringNullableFilter<"Lead"> | string | null
    customBody?: StringNullableFilter<"Lead"> | string | null
    shouldSend?: BoolFilter<"Lead"> | boolean
    status?: EnumLeadStatusFilter<"Lead"> | $Enums.LeadStatus
    sentAt?: DateTimeNullableFilter<"Lead"> | Date | string | null
    createdAt?: DateTimeFilter<"Lead"> | Date | string
    campaignId?: IntFilter<"Lead"> | number
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    leadEmailStatuses?: LeadEmailStatusListRelationFilter
  }, "id">

  export type LeadOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    customSubject?: SortOrderInput | SortOrder
    customBody?: SortOrderInput | SortOrder
    shouldSend?: SortOrder
    status?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    campaignId?: SortOrder
    _count?: LeadCountOrderByAggregateInput
    _avg?: LeadAvgOrderByAggregateInput
    _max?: LeadMaxOrderByAggregateInput
    _min?: LeadMinOrderByAggregateInput
    _sum?: LeadSumOrderByAggregateInput
  }

  export type LeadScalarWhereWithAggregatesInput = {
    AND?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    OR?: LeadScalarWhereWithAggregatesInput[]
    NOT?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lead"> | number
    email?: StringWithAggregatesFilter<"Lead"> | string
    firstName?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    company?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    customSubject?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    customBody?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    shouldSend?: BoolWithAggregatesFilter<"Lead"> | boolean
    status?: EnumLeadStatusWithAggregatesFilter<"Lead"> | $Enums.LeadStatus
    sentAt?: DateTimeNullableWithAggregatesFilter<"Lead"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Lead"> | Date | string
    campaignId?: IntWithAggregatesFilter<"Lead"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password?: string | null
    googleId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    googleAccessToken?: string | null
    googleRefreshToken?: string | null
    createdAt?: Date | string
    campaign?: CampaignCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password?: string | null
    googleId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    googleAccessToken?: string | null
    googleRefreshToken?: string | null
    createdAt?: Date | string
    campaign?: CampaignUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    googleAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    googleRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    googleAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    googleRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password?: string | null
    googleId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    googleAccessToken?: string | null
    googleRefreshToken?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    googleAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    googleRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    googleAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    googleRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateInput = {
    token: string
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    token: string
  }

  export type TokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokenCreateManyInput = {
    id?: number
    token: string
  }

  export type TokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignCreateInput = {
    name: string
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCampaignInput
    leads?: LeadCreateNestedManyWithoutCampaignInput
    emailSent?: EmailSentCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateInput = {
    id?: number
    name: string
    userId: number
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    leads?: LeadUncheckedCreateNestedManyWithoutCampaignInput
    emailSent?: EmailSentUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCampaignNestedInput
    leads?: LeadUpdateManyWithoutCampaignNestedInput
    emailSent?: EmailSentUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leads?: LeadUncheckedUpdateManyWithoutCampaignNestedInput
    emailSent?: EmailSentUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignCreateManyInput = {
    id?: number
    name: string
    userId: number
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignAttachmentsCreateInput = {
    filename: string
    url: string
    emailSent: EmailSentCreateNestedOneWithoutCampaignAttachmentsInput
  }

  export type CampaignAttachmentsUncheckedCreateInput = {
    id?: number
    filename: string
    url: string
    emailSentId: number
  }

  export type CampaignAttachmentsUpdateInput = {
    filename?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    emailSent?: EmailSentUpdateOneRequiredWithoutCampaignAttachmentsNestedInput
  }

  export type CampaignAttachmentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    emailSentId?: IntFieldUpdateOperationsInput | number
  }

  export type CampaignAttachmentsCreateManyInput = {
    id?: number
    filename: string
    url: string
    emailSentId: number
  }

  export type CampaignAttachmentsUpdateManyMutationInput = {
    filename?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignAttachmentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    emailSentId?: IntFieldUpdateOperationsInput | number
  }

  export type EmailSentCreateInput = {
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutEmailSentInput
    campaignAttachments?: CampaignAttachmentsCreateNestedManyWithoutEmailSentInput
    leadEmailStatus?: LeadEmailStatusCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentUncheckedCreateInput = {
    id?: number
    campaignId: number
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignAttachments?: CampaignAttachmentsUncheckedCreateNestedManyWithoutEmailSentInput
    leadEmailStatus?: LeadEmailStatusUncheckedCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentUpdateInput = {
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutEmailSentNestedInput
    campaignAttachments?: CampaignAttachmentsUpdateManyWithoutEmailSentNestedInput
    leadEmailStatus?: LeadEmailStatusUpdateManyWithoutEmailSentNestedInput
  }

  export type EmailSentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    campaignId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignAttachments?: CampaignAttachmentsUncheckedUpdateManyWithoutEmailSentNestedInput
    leadEmailStatus?: LeadEmailStatusUncheckedUpdateManyWithoutEmailSentNestedInput
  }

  export type EmailSentCreateManyInput = {
    id?: number
    campaignId: number
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailSentUpdateManyMutationInput = {
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailSentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    campaignId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadEmailStatusCreateInput = {
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
    lead: LeadCreateNestedOneWithoutLeadEmailStatusesInput
    emailSent: EmailSentCreateNestedOneWithoutLeadEmailStatusInput
  }

  export type LeadEmailStatusUncheckedCreateInput = {
    id?: number
    leadId: number
    emailSentId: number
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
  }

  export type LeadEmailStatusUpdateInput = {
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lead?: LeadUpdateOneRequiredWithoutLeadEmailStatusesNestedInput
    emailSent?: EmailSentUpdateOneRequiredWithoutLeadEmailStatusNestedInput
  }

  export type LeadEmailStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadId?: IntFieldUpdateOperationsInput | number
    emailSentId?: IntFieldUpdateOperationsInput | number
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadEmailStatusCreateManyInput = {
    id?: number
    leadId: number
    emailSentId: number
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
  }

  export type LeadEmailStatusUpdateManyMutationInput = {
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadEmailStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadId?: IntFieldUpdateOperationsInput | number
    emailSentId?: IntFieldUpdateOperationsInput | number
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadCreateInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutLeadsInput
    leadEmailStatuses?: LeadEmailStatusCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    campaignId: number
    leadEmailStatuses?: LeadEmailStatusUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutLeadsNestedInput
    leadEmailStatuses?: LeadEmailStatusUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignId?: IntFieldUpdateOperationsInput | number
    leadEmailStatuses?: LeadEmailStatusUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadCreateManyInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    campaignId: number
  }

  export type LeadUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CampaignListRelationFilter = {
    every?: CampaignWhereInput
    some?: CampaignWhereInput
    none?: CampaignWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleId?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    googleAccessToken?: SortOrder
    googleRefreshToken?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleId?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    googleAccessToken?: SortOrder
    googleRefreshToken?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleId?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    googleAccessToken?: SortOrder
    googleRefreshToken?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LeadListRelationFilter = {
    every?: LeadWhereInput
    some?: LeadWhereInput
    none?: LeadWhereInput
  }

  export type EmailSentListRelationFilter = {
    every?: EmailSentWhereInput
    some?: EmailSentWhereInput
    none?: EmailSentWhereInput
  }

  export type LeadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailSentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }

  export type EmailSentScalarRelationFilter = {
    is?: EmailSentWhereInput
    isNot?: EmailSentWhereInput
  }

  export type CampaignAttachmentsCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    url?: SortOrder
    emailSentId?: SortOrder
  }

  export type CampaignAttachmentsAvgOrderByAggregateInput = {
    id?: SortOrder
    emailSentId?: SortOrder
  }

  export type CampaignAttachmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    url?: SortOrder
    emailSentId?: SortOrder
  }

  export type CampaignAttachmentsMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    url?: SortOrder
    emailSentId?: SortOrder
  }

  export type CampaignAttachmentsSumOrderByAggregateInput = {
    id?: SortOrder
    emailSentId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumEmailStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusFilter<$PrismaModel> | $Enums.EmailStatus
  }

  export type CampaignScalarRelationFilter = {
    is?: CampaignWhereInput
    isNot?: CampaignWhereInput
  }

  export type CampaignAttachmentsListRelationFilter = {
    every?: CampaignAttachmentsWhereInput
    some?: CampaignAttachmentsWhereInput
    none?: CampaignAttachmentsWhereInput
  }

  export type LeadEmailStatusListRelationFilter = {
    every?: LeadEmailStatusWhereInput
    some?: LeadEmailStatusWhereInput
    none?: LeadEmailStatusWhereInput
  }

  export type CampaignAttachmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadEmailStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailSentCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    order?: SortOrder
    sendAfterDays?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSentAvgOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    order?: SortOrder
    sendAfterDays?: SortOrder
  }

  export type EmailSentMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    order?: SortOrder
    sendAfterDays?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSentMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    order?: SortOrder
    sendAfterDays?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSentSumOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    order?: SortOrder
    sendAfterDays?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumEmailStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmailStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailStatusFilter<$PrismaModel>
    _max?: NestedEnumEmailStatusFilter<$PrismaModel>
  }

  export type LeadScalarRelationFilter = {
    is?: LeadWhereInput
    isNot?: LeadWhereInput
  }

  export type LeadEmailStatusLeadIdEmailSentIdCompoundUniqueInput = {
    leadId: number
    emailSentId: number
  }

  export type LeadEmailStatusCountOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    emailSentId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
  }

  export type LeadEmailStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    emailSentId?: SortOrder
  }

  export type LeadEmailStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    emailSentId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
  }

  export type LeadEmailStatusMinOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    emailSentId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
  }

  export type LeadEmailStatusSumOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    emailSentId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumLeadStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadStatus | EnumLeadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadStatusFilter<$PrismaModel> | $Enums.LeadStatus
  }

  export type LeadCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    company?: SortOrder
    customSubject?: SortOrder
    customBody?: SortOrder
    shouldSend?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    campaignId?: SortOrder
  }

  export type LeadAvgOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
  }

  export type LeadMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    company?: SortOrder
    customSubject?: SortOrder
    customBody?: SortOrder
    shouldSend?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    campaignId?: SortOrder
  }

  export type LeadMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    company?: SortOrder
    customSubject?: SortOrder
    customBody?: SortOrder
    shouldSend?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    campaignId?: SortOrder
  }

  export type LeadSumOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumLeadStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadStatus | EnumLeadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadStatusWithAggregatesFilter<$PrismaModel> | $Enums.LeadStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeadStatusFilter<$PrismaModel>
    _max?: NestedEnumLeadStatusFilter<$PrismaModel>
  }

  export type CampaignCreateNestedManyWithoutUserInput = {
    create?: XOR<CampaignCreateWithoutUserInput, CampaignUncheckedCreateWithoutUserInput> | CampaignCreateWithoutUserInput[] | CampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUserInput | CampaignCreateOrConnectWithoutUserInput[]
    createMany?: CampaignCreateManyUserInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CampaignCreateWithoutUserInput, CampaignUncheckedCreateWithoutUserInput> | CampaignCreateWithoutUserInput[] | CampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUserInput | CampaignCreateOrConnectWithoutUserInput[]
    createMany?: CampaignCreateManyUserInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CampaignUpdateManyWithoutUserNestedInput = {
    create?: XOR<CampaignCreateWithoutUserInput, CampaignUncheckedCreateWithoutUserInput> | CampaignCreateWithoutUserInput[] | CampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUserInput | CampaignCreateOrConnectWithoutUserInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutUserInput | CampaignUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CampaignCreateManyUserInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutUserInput | CampaignUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutUserInput | CampaignUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CampaignUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CampaignCreateWithoutUserInput, CampaignUncheckedCreateWithoutUserInput> | CampaignCreateWithoutUserInput[] | CampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUserInput | CampaignCreateOrConnectWithoutUserInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutUserInput | CampaignUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CampaignCreateManyUserInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutUserInput | CampaignUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutUserInput | CampaignUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCampaignInput = {
    create?: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: UserCreateOrConnectWithoutCampaignInput
    connect?: UserWhereUniqueInput
  }

  export type LeadCreateNestedManyWithoutCampaignInput = {
    create?: XOR<LeadCreateWithoutCampaignInput, LeadUncheckedCreateWithoutCampaignInput> | LeadCreateWithoutCampaignInput[] | LeadUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutCampaignInput | LeadCreateOrConnectWithoutCampaignInput[]
    createMany?: LeadCreateManyCampaignInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type EmailSentCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EmailSentCreateWithoutCampaignInput, EmailSentUncheckedCreateWithoutCampaignInput> | EmailSentCreateWithoutCampaignInput[] | EmailSentUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailSentCreateOrConnectWithoutCampaignInput | EmailSentCreateOrConnectWithoutCampaignInput[]
    createMany?: EmailSentCreateManyCampaignInputEnvelope
    connect?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
  }

  export type LeadUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<LeadCreateWithoutCampaignInput, LeadUncheckedCreateWithoutCampaignInput> | LeadCreateWithoutCampaignInput[] | LeadUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutCampaignInput | LeadCreateOrConnectWithoutCampaignInput[]
    createMany?: LeadCreateManyCampaignInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type EmailSentUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EmailSentCreateWithoutCampaignInput, EmailSentUncheckedCreateWithoutCampaignInput> | EmailSentCreateWithoutCampaignInput[] | EmailSentUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailSentCreateOrConnectWithoutCampaignInput | EmailSentCreateOrConnectWithoutCampaignInput[]
    createMany?: EmailSentCreateManyCampaignInputEnvelope
    connect?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
  }

  export type EnumCampaignStatusFieldUpdateOperationsInput = {
    set?: $Enums.CampaignStatus
  }

  export type UserUpdateOneRequiredWithoutCampaignNestedInput = {
    create?: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: UserCreateOrConnectWithoutCampaignInput
    upsert?: UserUpsertWithoutCampaignInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCampaignInput, UserUpdateWithoutCampaignInput>, UserUncheckedUpdateWithoutCampaignInput>
  }

  export type LeadUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<LeadCreateWithoutCampaignInput, LeadUncheckedCreateWithoutCampaignInput> | LeadCreateWithoutCampaignInput[] | LeadUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutCampaignInput | LeadCreateOrConnectWithoutCampaignInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutCampaignInput | LeadUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: LeadCreateManyCampaignInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutCampaignInput | LeadUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutCampaignInput | LeadUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type EmailSentUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EmailSentCreateWithoutCampaignInput, EmailSentUncheckedCreateWithoutCampaignInput> | EmailSentCreateWithoutCampaignInput[] | EmailSentUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailSentCreateOrConnectWithoutCampaignInput | EmailSentCreateOrConnectWithoutCampaignInput[]
    upsert?: EmailSentUpsertWithWhereUniqueWithoutCampaignInput | EmailSentUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EmailSentCreateManyCampaignInputEnvelope
    set?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    disconnect?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    delete?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    connect?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    update?: EmailSentUpdateWithWhereUniqueWithoutCampaignInput | EmailSentUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EmailSentUpdateManyWithWhereWithoutCampaignInput | EmailSentUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EmailSentScalarWhereInput | EmailSentScalarWhereInput[]
  }

  export type LeadUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<LeadCreateWithoutCampaignInput, LeadUncheckedCreateWithoutCampaignInput> | LeadCreateWithoutCampaignInput[] | LeadUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutCampaignInput | LeadCreateOrConnectWithoutCampaignInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutCampaignInput | LeadUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: LeadCreateManyCampaignInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutCampaignInput | LeadUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutCampaignInput | LeadUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type EmailSentUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EmailSentCreateWithoutCampaignInput, EmailSentUncheckedCreateWithoutCampaignInput> | EmailSentCreateWithoutCampaignInput[] | EmailSentUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailSentCreateOrConnectWithoutCampaignInput | EmailSentCreateOrConnectWithoutCampaignInput[]
    upsert?: EmailSentUpsertWithWhereUniqueWithoutCampaignInput | EmailSentUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EmailSentCreateManyCampaignInputEnvelope
    set?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    disconnect?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    delete?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    connect?: EmailSentWhereUniqueInput | EmailSentWhereUniqueInput[]
    update?: EmailSentUpdateWithWhereUniqueWithoutCampaignInput | EmailSentUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EmailSentUpdateManyWithWhereWithoutCampaignInput | EmailSentUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EmailSentScalarWhereInput | EmailSentScalarWhereInput[]
  }

  export type EmailSentCreateNestedOneWithoutCampaignAttachmentsInput = {
    create?: XOR<EmailSentCreateWithoutCampaignAttachmentsInput, EmailSentUncheckedCreateWithoutCampaignAttachmentsInput>
    connectOrCreate?: EmailSentCreateOrConnectWithoutCampaignAttachmentsInput
    connect?: EmailSentWhereUniqueInput
  }

  export type EmailSentUpdateOneRequiredWithoutCampaignAttachmentsNestedInput = {
    create?: XOR<EmailSentCreateWithoutCampaignAttachmentsInput, EmailSentUncheckedCreateWithoutCampaignAttachmentsInput>
    connectOrCreate?: EmailSentCreateOrConnectWithoutCampaignAttachmentsInput
    upsert?: EmailSentUpsertWithoutCampaignAttachmentsInput
    connect?: EmailSentWhereUniqueInput
    update?: XOR<XOR<EmailSentUpdateToOneWithWhereWithoutCampaignAttachmentsInput, EmailSentUpdateWithoutCampaignAttachmentsInput>, EmailSentUncheckedUpdateWithoutCampaignAttachmentsInput>
  }

  export type CampaignCreateNestedOneWithoutEmailSentInput = {
    create?: XOR<CampaignCreateWithoutEmailSentInput, CampaignUncheckedCreateWithoutEmailSentInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutEmailSentInput
    connect?: CampaignWhereUniqueInput
  }

  export type CampaignAttachmentsCreateNestedManyWithoutEmailSentInput = {
    create?: XOR<CampaignAttachmentsCreateWithoutEmailSentInput, CampaignAttachmentsUncheckedCreateWithoutEmailSentInput> | CampaignAttachmentsCreateWithoutEmailSentInput[] | CampaignAttachmentsUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: CampaignAttachmentsCreateOrConnectWithoutEmailSentInput | CampaignAttachmentsCreateOrConnectWithoutEmailSentInput[]
    createMany?: CampaignAttachmentsCreateManyEmailSentInputEnvelope
    connect?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
  }

  export type LeadEmailStatusCreateNestedManyWithoutEmailSentInput = {
    create?: XOR<LeadEmailStatusCreateWithoutEmailSentInput, LeadEmailStatusUncheckedCreateWithoutEmailSentInput> | LeadEmailStatusCreateWithoutEmailSentInput[] | LeadEmailStatusUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutEmailSentInput | LeadEmailStatusCreateOrConnectWithoutEmailSentInput[]
    createMany?: LeadEmailStatusCreateManyEmailSentInputEnvelope
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
  }

  export type CampaignAttachmentsUncheckedCreateNestedManyWithoutEmailSentInput = {
    create?: XOR<CampaignAttachmentsCreateWithoutEmailSentInput, CampaignAttachmentsUncheckedCreateWithoutEmailSentInput> | CampaignAttachmentsCreateWithoutEmailSentInput[] | CampaignAttachmentsUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: CampaignAttachmentsCreateOrConnectWithoutEmailSentInput | CampaignAttachmentsCreateOrConnectWithoutEmailSentInput[]
    createMany?: CampaignAttachmentsCreateManyEmailSentInputEnvelope
    connect?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
  }

  export type LeadEmailStatusUncheckedCreateNestedManyWithoutEmailSentInput = {
    create?: XOR<LeadEmailStatusCreateWithoutEmailSentInput, LeadEmailStatusUncheckedCreateWithoutEmailSentInput> | LeadEmailStatusCreateWithoutEmailSentInput[] | LeadEmailStatusUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutEmailSentInput | LeadEmailStatusCreateOrConnectWithoutEmailSentInput[]
    createMany?: LeadEmailStatusCreateManyEmailSentInputEnvelope
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumEmailStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmailStatus
  }

  export type CampaignUpdateOneRequiredWithoutEmailSentNestedInput = {
    create?: XOR<CampaignCreateWithoutEmailSentInput, CampaignUncheckedCreateWithoutEmailSentInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutEmailSentInput
    upsert?: CampaignUpsertWithoutEmailSentInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutEmailSentInput, CampaignUpdateWithoutEmailSentInput>, CampaignUncheckedUpdateWithoutEmailSentInput>
  }

  export type CampaignAttachmentsUpdateManyWithoutEmailSentNestedInput = {
    create?: XOR<CampaignAttachmentsCreateWithoutEmailSentInput, CampaignAttachmentsUncheckedCreateWithoutEmailSentInput> | CampaignAttachmentsCreateWithoutEmailSentInput[] | CampaignAttachmentsUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: CampaignAttachmentsCreateOrConnectWithoutEmailSentInput | CampaignAttachmentsCreateOrConnectWithoutEmailSentInput[]
    upsert?: CampaignAttachmentsUpsertWithWhereUniqueWithoutEmailSentInput | CampaignAttachmentsUpsertWithWhereUniqueWithoutEmailSentInput[]
    createMany?: CampaignAttachmentsCreateManyEmailSentInputEnvelope
    set?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    disconnect?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    delete?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    connect?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    update?: CampaignAttachmentsUpdateWithWhereUniqueWithoutEmailSentInput | CampaignAttachmentsUpdateWithWhereUniqueWithoutEmailSentInput[]
    updateMany?: CampaignAttachmentsUpdateManyWithWhereWithoutEmailSentInput | CampaignAttachmentsUpdateManyWithWhereWithoutEmailSentInput[]
    deleteMany?: CampaignAttachmentsScalarWhereInput | CampaignAttachmentsScalarWhereInput[]
  }

  export type LeadEmailStatusUpdateManyWithoutEmailSentNestedInput = {
    create?: XOR<LeadEmailStatusCreateWithoutEmailSentInput, LeadEmailStatusUncheckedCreateWithoutEmailSentInput> | LeadEmailStatusCreateWithoutEmailSentInput[] | LeadEmailStatusUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutEmailSentInput | LeadEmailStatusCreateOrConnectWithoutEmailSentInput[]
    upsert?: LeadEmailStatusUpsertWithWhereUniqueWithoutEmailSentInput | LeadEmailStatusUpsertWithWhereUniqueWithoutEmailSentInput[]
    createMany?: LeadEmailStatusCreateManyEmailSentInputEnvelope
    set?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    disconnect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    delete?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    update?: LeadEmailStatusUpdateWithWhereUniqueWithoutEmailSentInput | LeadEmailStatusUpdateWithWhereUniqueWithoutEmailSentInput[]
    updateMany?: LeadEmailStatusUpdateManyWithWhereWithoutEmailSentInput | LeadEmailStatusUpdateManyWithWhereWithoutEmailSentInput[]
    deleteMany?: LeadEmailStatusScalarWhereInput | LeadEmailStatusScalarWhereInput[]
  }

  export type CampaignAttachmentsUncheckedUpdateManyWithoutEmailSentNestedInput = {
    create?: XOR<CampaignAttachmentsCreateWithoutEmailSentInput, CampaignAttachmentsUncheckedCreateWithoutEmailSentInput> | CampaignAttachmentsCreateWithoutEmailSentInput[] | CampaignAttachmentsUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: CampaignAttachmentsCreateOrConnectWithoutEmailSentInput | CampaignAttachmentsCreateOrConnectWithoutEmailSentInput[]
    upsert?: CampaignAttachmentsUpsertWithWhereUniqueWithoutEmailSentInput | CampaignAttachmentsUpsertWithWhereUniqueWithoutEmailSentInput[]
    createMany?: CampaignAttachmentsCreateManyEmailSentInputEnvelope
    set?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    disconnect?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    delete?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    connect?: CampaignAttachmentsWhereUniqueInput | CampaignAttachmentsWhereUniqueInput[]
    update?: CampaignAttachmentsUpdateWithWhereUniqueWithoutEmailSentInput | CampaignAttachmentsUpdateWithWhereUniqueWithoutEmailSentInput[]
    updateMany?: CampaignAttachmentsUpdateManyWithWhereWithoutEmailSentInput | CampaignAttachmentsUpdateManyWithWhereWithoutEmailSentInput[]
    deleteMany?: CampaignAttachmentsScalarWhereInput | CampaignAttachmentsScalarWhereInput[]
  }

  export type LeadEmailStatusUncheckedUpdateManyWithoutEmailSentNestedInput = {
    create?: XOR<LeadEmailStatusCreateWithoutEmailSentInput, LeadEmailStatusUncheckedCreateWithoutEmailSentInput> | LeadEmailStatusCreateWithoutEmailSentInput[] | LeadEmailStatusUncheckedCreateWithoutEmailSentInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutEmailSentInput | LeadEmailStatusCreateOrConnectWithoutEmailSentInput[]
    upsert?: LeadEmailStatusUpsertWithWhereUniqueWithoutEmailSentInput | LeadEmailStatusUpsertWithWhereUniqueWithoutEmailSentInput[]
    createMany?: LeadEmailStatusCreateManyEmailSentInputEnvelope
    set?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    disconnect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    delete?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    update?: LeadEmailStatusUpdateWithWhereUniqueWithoutEmailSentInput | LeadEmailStatusUpdateWithWhereUniqueWithoutEmailSentInput[]
    updateMany?: LeadEmailStatusUpdateManyWithWhereWithoutEmailSentInput | LeadEmailStatusUpdateManyWithWhereWithoutEmailSentInput[]
    deleteMany?: LeadEmailStatusScalarWhereInput | LeadEmailStatusScalarWhereInput[]
  }

  export type LeadCreateNestedOneWithoutLeadEmailStatusesInput = {
    create?: XOR<LeadCreateWithoutLeadEmailStatusesInput, LeadUncheckedCreateWithoutLeadEmailStatusesInput>
    connectOrCreate?: LeadCreateOrConnectWithoutLeadEmailStatusesInput
    connect?: LeadWhereUniqueInput
  }

  export type EmailSentCreateNestedOneWithoutLeadEmailStatusInput = {
    create?: XOR<EmailSentCreateWithoutLeadEmailStatusInput, EmailSentUncheckedCreateWithoutLeadEmailStatusInput>
    connectOrCreate?: EmailSentCreateOrConnectWithoutLeadEmailStatusInput
    connect?: EmailSentWhereUniqueInput
  }

  export type LeadUpdateOneRequiredWithoutLeadEmailStatusesNestedInput = {
    create?: XOR<LeadCreateWithoutLeadEmailStatusesInput, LeadUncheckedCreateWithoutLeadEmailStatusesInput>
    connectOrCreate?: LeadCreateOrConnectWithoutLeadEmailStatusesInput
    upsert?: LeadUpsertWithoutLeadEmailStatusesInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutLeadEmailStatusesInput, LeadUpdateWithoutLeadEmailStatusesInput>, LeadUncheckedUpdateWithoutLeadEmailStatusesInput>
  }

  export type EmailSentUpdateOneRequiredWithoutLeadEmailStatusNestedInput = {
    create?: XOR<EmailSentCreateWithoutLeadEmailStatusInput, EmailSentUncheckedCreateWithoutLeadEmailStatusInput>
    connectOrCreate?: EmailSentCreateOrConnectWithoutLeadEmailStatusInput
    upsert?: EmailSentUpsertWithoutLeadEmailStatusInput
    connect?: EmailSentWhereUniqueInput
    update?: XOR<XOR<EmailSentUpdateToOneWithWhereWithoutLeadEmailStatusInput, EmailSentUpdateWithoutLeadEmailStatusInput>, EmailSentUncheckedUpdateWithoutLeadEmailStatusInput>
  }

  export type CampaignCreateNestedOneWithoutLeadsInput = {
    create?: XOR<CampaignCreateWithoutLeadsInput, CampaignUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutLeadsInput
    connect?: CampaignWhereUniqueInput
  }

  export type LeadEmailStatusCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadEmailStatusCreateWithoutLeadInput, LeadEmailStatusUncheckedCreateWithoutLeadInput> | LeadEmailStatusCreateWithoutLeadInput[] | LeadEmailStatusUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutLeadInput | LeadEmailStatusCreateOrConnectWithoutLeadInput[]
    createMany?: LeadEmailStatusCreateManyLeadInputEnvelope
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
  }

  export type LeadEmailStatusUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadEmailStatusCreateWithoutLeadInput, LeadEmailStatusUncheckedCreateWithoutLeadInput> | LeadEmailStatusCreateWithoutLeadInput[] | LeadEmailStatusUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutLeadInput | LeadEmailStatusCreateOrConnectWithoutLeadInput[]
    createMany?: LeadEmailStatusCreateManyLeadInputEnvelope
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumLeadStatusFieldUpdateOperationsInput = {
    set?: $Enums.LeadStatus
  }

  export type CampaignUpdateOneRequiredWithoutLeadsNestedInput = {
    create?: XOR<CampaignCreateWithoutLeadsInput, CampaignUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutLeadsInput
    upsert?: CampaignUpsertWithoutLeadsInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutLeadsInput, CampaignUpdateWithoutLeadsInput>, CampaignUncheckedUpdateWithoutLeadsInput>
  }

  export type LeadEmailStatusUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadEmailStatusCreateWithoutLeadInput, LeadEmailStatusUncheckedCreateWithoutLeadInput> | LeadEmailStatusCreateWithoutLeadInput[] | LeadEmailStatusUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutLeadInput | LeadEmailStatusCreateOrConnectWithoutLeadInput[]
    upsert?: LeadEmailStatusUpsertWithWhereUniqueWithoutLeadInput | LeadEmailStatusUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadEmailStatusCreateManyLeadInputEnvelope
    set?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    disconnect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    delete?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    update?: LeadEmailStatusUpdateWithWhereUniqueWithoutLeadInput | LeadEmailStatusUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadEmailStatusUpdateManyWithWhereWithoutLeadInput | LeadEmailStatusUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadEmailStatusScalarWhereInput | LeadEmailStatusScalarWhereInput[]
  }

  export type LeadEmailStatusUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadEmailStatusCreateWithoutLeadInput, LeadEmailStatusUncheckedCreateWithoutLeadInput> | LeadEmailStatusCreateWithoutLeadInput[] | LeadEmailStatusUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadEmailStatusCreateOrConnectWithoutLeadInput | LeadEmailStatusCreateOrConnectWithoutLeadInput[]
    upsert?: LeadEmailStatusUpsertWithWhereUniqueWithoutLeadInput | LeadEmailStatusUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadEmailStatusCreateManyLeadInputEnvelope
    set?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    disconnect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    delete?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    connect?: LeadEmailStatusWhereUniqueInput | LeadEmailStatusWhereUniqueInput[]
    update?: LeadEmailStatusUpdateWithWhereUniqueWithoutLeadInput | LeadEmailStatusUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadEmailStatusUpdateManyWithWhereWithoutLeadInput | LeadEmailStatusUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadEmailStatusScalarWhereInput | LeadEmailStatusScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }

  export type NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }

  export type NestedEnumEmailStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusFilter<$PrismaModel> | $Enums.EmailStatus
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmailStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailStatusFilter<$PrismaModel>
    _max?: NestedEnumEmailStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumLeadStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadStatus | EnumLeadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadStatusFilter<$PrismaModel> | $Enums.LeadStatus
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumLeadStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadStatus | EnumLeadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadStatus[] | ListEnumLeadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadStatusWithAggregatesFilter<$PrismaModel> | $Enums.LeadStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeadStatusFilter<$PrismaModel>
    _max?: NestedEnumLeadStatusFilter<$PrismaModel>
  }

  export type CampaignCreateWithoutUserInput = {
    name: string
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    leads?: LeadCreateNestedManyWithoutCampaignInput
    emailSent?: EmailSentCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    leads?: LeadUncheckedCreateNestedManyWithoutCampaignInput
    emailSent?: EmailSentUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutUserInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutUserInput, CampaignUncheckedCreateWithoutUserInput>
  }

  export type CampaignCreateManyUserInputEnvelope = {
    data: CampaignCreateManyUserInput | CampaignCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithWhereUniqueWithoutUserInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutUserInput, CampaignUncheckedUpdateWithoutUserInput>
    create: XOR<CampaignCreateWithoutUserInput, CampaignUncheckedCreateWithoutUserInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutUserInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutUserInput, CampaignUncheckedUpdateWithoutUserInput>
  }

  export type CampaignUpdateManyWithWhereWithoutUserInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutUserInput>
  }

  export type CampaignScalarWhereInput = {
    AND?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    OR?: CampaignScalarWhereInput[]
    NOT?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    id?: IntFilter<"Campaign"> | number
    name?: StringFilter<"Campaign"> | string
    userId?: IntFilter<"Campaign"> | number
    subject?: StringFilter<"Campaign"> | string
    body?: StringFilter<"Campaign"> | string
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
  }

  export type UserCreateWithoutCampaignInput = {
    name: string
    email: string
    password?: string | null
    googleId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    googleAccessToken?: string | null
    googleRefreshToken?: string | null
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutCampaignInput = {
    id?: number
    name: string
    email: string
    password?: string | null
    googleId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    googleAccessToken?: string | null
    googleRefreshToken?: string | null
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutCampaignInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
  }

  export type LeadCreateWithoutCampaignInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    leadEmailStatuses?: LeadEmailStatusCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutCampaignInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    leadEmailStatuses?: LeadEmailStatusUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutCampaignInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutCampaignInput, LeadUncheckedCreateWithoutCampaignInput>
  }

  export type LeadCreateManyCampaignInputEnvelope = {
    data: LeadCreateManyCampaignInput | LeadCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type EmailSentCreateWithoutCampaignInput = {
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignAttachments?: CampaignAttachmentsCreateNestedManyWithoutEmailSentInput
    leadEmailStatus?: LeadEmailStatusCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentUncheckedCreateWithoutCampaignInput = {
    id?: number
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignAttachments?: CampaignAttachmentsUncheckedCreateNestedManyWithoutEmailSentInput
    leadEmailStatus?: LeadEmailStatusUncheckedCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentCreateOrConnectWithoutCampaignInput = {
    where: EmailSentWhereUniqueInput
    create: XOR<EmailSentCreateWithoutCampaignInput, EmailSentUncheckedCreateWithoutCampaignInput>
  }

  export type EmailSentCreateManyCampaignInputEnvelope = {
    data: EmailSentCreateManyCampaignInput | EmailSentCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCampaignInput = {
    update: XOR<UserUpdateWithoutCampaignInput, UserUncheckedUpdateWithoutCampaignInput>
    create: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCampaignInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCampaignInput, UserUncheckedUpdateWithoutCampaignInput>
  }

  export type UserUpdateWithoutCampaignInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    googleAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    googleRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutCampaignInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    googleAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    googleRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadUpsertWithWhereUniqueWithoutCampaignInput = {
    where: LeadWhereUniqueInput
    update: XOR<LeadUpdateWithoutCampaignInput, LeadUncheckedUpdateWithoutCampaignInput>
    create: XOR<LeadCreateWithoutCampaignInput, LeadUncheckedCreateWithoutCampaignInput>
  }

  export type LeadUpdateWithWhereUniqueWithoutCampaignInput = {
    where: LeadWhereUniqueInput
    data: XOR<LeadUpdateWithoutCampaignInput, LeadUncheckedUpdateWithoutCampaignInput>
  }

  export type LeadUpdateManyWithWhereWithoutCampaignInput = {
    where: LeadScalarWhereInput
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyWithoutCampaignInput>
  }

  export type LeadScalarWhereInput = {
    AND?: LeadScalarWhereInput | LeadScalarWhereInput[]
    OR?: LeadScalarWhereInput[]
    NOT?: LeadScalarWhereInput | LeadScalarWhereInput[]
    id?: IntFilter<"Lead"> | number
    email?: StringFilter<"Lead"> | string
    firstName?: StringNullableFilter<"Lead"> | string | null
    lastName?: StringNullableFilter<"Lead"> | string | null
    company?: StringNullableFilter<"Lead"> | string | null
    customSubject?: StringNullableFilter<"Lead"> | string | null
    customBody?: StringNullableFilter<"Lead"> | string | null
    shouldSend?: BoolFilter<"Lead"> | boolean
    status?: EnumLeadStatusFilter<"Lead"> | $Enums.LeadStatus
    sentAt?: DateTimeNullableFilter<"Lead"> | Date | string | null
    createdAt?: DateTimeFilter<"Lead"> | Date | string
    campaignId?: IntFilter<"Lead"> | number
  }

  export type EmailSentUpsertWithWhereUniqueWithoutCampaignInput = {
    where: EmailSentWhereUniqueInput
    update: XOR<EmailSentUpdateWithoutCampaignInput, EmailSentUncheckedUpdateWithoutCampaignInput>
    create: XOR<EmailSentCreateWithoutCampaignInput, EmailSentUncheckedCreateWithoutCampaignInput>
  }

  export type EmailSentUpdateWithWhereUniqueWithoutCampaignInput = {
    where: EmailSentWhereUniqueInput
    data: XOR<EmailSentUpdateWithoutCampaignInput, EmailSentUncheckedUpdateWithoutCampaignInput>
  }

  export type EmailSentUpdateManyWithWhereWithoutCampaignInput = {
    where: EmailSentScalarWhereInput
    data: XOR<EmailSentUpdateManyMutationInput, EmailSentUncheckedUpdateManyWithoutCampaignInput>
  }

  export type EmailSentScalarWhereInput = {
    AND?: EmailSentScalarWhereInput | EmailSentScalarWhereInput[]
    OR?: EmailSentScalarWhereInput[]
    NOT?: EmailSentScalarWhereInput | EmailSentScalarWhereInput[]
    id?: IntFilter<"EmailSent"> | number
    campaignId?: IntFilter<"EmailSent"> | number
    subject?: StringFilter<"EmailSent"> | string
    body?: StringFilter<"EmailSent"> | string
    order?: IntNullableFilter<"EmailSent"> | number | null
    sendAfterDays?: IntNullableFilter<"EmailSent"> | number | null
    status?: EnumEmailStatusFilter<"EmailSent"> | $Enums.EmailStatus
    createdAt?: DateTimeFilter<"EmailSent"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSent"> | Date | string
  }

  export type EmailSentCreateWithoutCampaignAttachmentsInput = {
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutEmailSentInput
    leadEmailStatus?: LeadEmailStatusCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentUncheckedCreateWithoutCampaignAttachmentsInput = {
    id?: number
    campaignId: number
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    leadEmailStatus?: LeadEmailStatusUncheckedCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentCreateOrConnectWithoutCampaignAttachmentsInput = {
    where: EmailSentWhereUniqueInput
    create: XOR<EmailSentCreateWithoutCampaignAttachmentsInput, EmailSentUncheckedCreateWithoutCampaignAttachmentsInput>
  }

  export type EmailSentUpsertWithoutCampaignAttachmentsInput = {
    update: XOR<EmailSentUpdateWithoutCampaignAttachmentsInput, EmailSentUncheckedUpdateWithoutCampaignAttachmentsInput>
    create: XOR<EmailSentCreateWithoutCampaignAttachmentsInput, EmailSentUncheckedCreateWithoutCampaignAttachmentsInput>
    where?: EmailSentWhereInput
  }

  export type EmailSentUpdateToOneWithWhereWithoutCampaignAttachmentsInput = {
    where?: EmailSentWhereInput
    data: XOR<EmailSentUpdateWithoutCampaignAttachmentsInput, EmailSentUncheckedUpdateWithoutCampaignAttachmentsInput>
  }

  export type EmailSentUpdateWithoutCampaignAttachmentsInput = {
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutEmailSentNestedInput
    leadEmailStatus?: LeadEmailStatusUpdateManyWithoutEmailSentNestedInput
  }

  export type EmailSentUncheckedUpdateWithoutCampaignAttachmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    campaignId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadEmailStatus?: LeadEmailStatusUncheckedUpdateManyWithoutEmailSentNestedInput
  }

  export type CampaignCreateWithoutEmailSentInput = {
    name: string
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCampaignInput
    leads?: LeadCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutEmailSentInput = {
    id?: number
    name: string
    userId: number
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    leads?: LeadUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutEmailSentInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutEmailSentInput, CampaignUncheckedCreateWithoutEmailSentInput>
  }

  export type CampaignAttachmentsCreateWithoutEmailSentInput = {
    filename: string
    url: string
  }

  export type CampaignAttachmentsUncheckedCreateWithoutEmailSentInput = {
    id?: number
    filename: string
    url: string
  }

  export type CampaignAttachmentsCreateOrConnectWithoutEmailSentInput = {
    where: CampaignAttachmentsWhereUniqueInput
    create: XOR<CampaignAttachmentsCreateWithoutEmailSentInput, CampaignAttachmentsUncheckedCreateWithoutEmailSentInput>
  }

  export type CampaignAttachmentsCreateManyEmailSentInputEnvelope = {
    data: CampaignAttachmentsCreateManyEmailSentInput | CampaignAttachmentsCreateManyEmailSentInput[]
    skipDuplicates?: boolean
  }

  export type LeadEmailStatusCreateWithoutEmailSentInput = {
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
    lead: LeadCreateNestedOneWithoutLeadEmailStatusesInput
  }

  export type LeadEmailStatusUncheckedCreateWithoutEmailSentInput = {
    id?: number
    leadId: number
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
  }

  export type LeadEmailStatusCreateOrConnectWithoutEmailSentInput = {
    where: LeadEmailStatusWhereUniqueInput
    create: XOR<LeadEmailStatusCreateWithoutEmailSentInput, LeadEmailStatusUncheckedCreateWithoutEmailSentInput>
  }

  export type LeadEmailStatusCreateManyEmailSentInputEnvelope = {
    data: LeadEmailStatusCreateManyEmailSentInput | LeadEmailStatusCreateManyEmailSentInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutEmailSentInput = {
    update: XOR<CampaignUpdateWithoutEmailSentInput, CampaignUncheckedUpdateWithoutEmailSentInput>
    create: XOR<CampaignCreateWithoutEmailSentInput, CampaignUncheckedCreateWithoutEmailSentInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutEmailSentInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutEmailSentInput, CampaignUncheckedUpdateWithoutEmailSentInput>
  }

  export type CampaignUpdateWithoutEmailSentInput = {
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCampaignNestedInput
    leads?: LeadUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutEmailSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leads?: LeadUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignAttachmentsUpsertWithWhereUniqueWithoutEmailSentInput = {
    where: CampaignAttachmentsWhereUniqueInput
    update: XOR<CampaignAttachmentsUpdateWithoutEmailSentInput, CampaignAttachmentsUncheckedUpdateWithoutEmailSentInput>
    create: XOR<CampaignAttachmentsCreateWithoutEmailSentInput, CampaignAttachmentsUncheckedCreateWithoutEmailSentInput>
  }

  export type CampaignAttachmentsUpdateWithWhereUniqueWithoutEmailSentInput = {
    where: CampaignAttachmentsWhereUniqueInput
    data: XOR<CampaignAttachmentsUpdateWithoutEmailSentInput, CampaignAttachmentsUncheckedUpdateWithoutEmailSentInput>
  }

  export type CampaignAttachmentsUpdateManyWithWhereWithoutEmailSentInput = {
    where: CampaignAttachmentsScalarWhereInput
    data: XOR<CampaignAttachmentsUpdateManyMutationInput, CampaignAttachmentsUncheckedUpdateManyWithoutEmailSentInput>
  }

  export type CampaignAttachmentsScalarWhereInput = {
    AND?: CampaignAttachmentsScalarWhereInput | CampaignAttachmentsScalarWhereInput[]
    OR?: CampaignAttachmentsScalarWhereInput[]
    NOT?: CampaignAttachmentsScalarWhereInput | CampaignAttachmentsScalarWhereInput[]
    id?: IntFilter<"CampaignAttachments"> | number
    filename?: StringFilter<"CampaignAttachments"> | string
    url?: StringFilter<"CampaignAttachments"> | string
    emailSentId?: IntFilter<"CampaignAttachments"> | number
  }

  export type LeadEmailStatusUpsertWithWhereUniqueWithoutEmailSentInput = {
    where: LeadEmailStatusWhereUniqueInput
    update: XOR<LeadEmailStatusUpdateWithoutEmailSentInput, LeadEmailStatusUncheckedUpdateWithoutEmailSentInput>
    create: XOR<LeadEmailStatusCreateWithoutEmailSentInput, LeadEmailStatusUncheckedCreateWithoutEmailSentInput>
  }

  export type LeadEmailStatusUpdateWithWhereUniqueWithoutEmailSentInput = {
    where: LeadEmailStatusWhereUniqueInput
    data: XOR<LeadEmailStatusUpdateWithoutEmailSentInput, LeadEmailStatusUncheckedUpdateWithoutEmailSentInput>
  }

  export type LeadEmailStatusUpdateManyWithWhereWithoutEmailSentInput = {
    where: LeadEmailStatusScalarWhereInput
    data: XOR<LeadEmailStatusUpdateManyMutationInput, LeadEmailStatusUncheckedUpdateManyWithoutEmailSentInput>
  }

  export type LeadEmailStatusScalarWhereInput = {
    AND?: LeadEmailStatusScalarWhereInput | LeadEmailStatusScalarWhereInput[]
    OR?: LeadEmailStatusScalarWhereInput[]
    NOT?: LeadEmailStatusScalarWhereInput | LeadEmailStatusScalarWhereInput[]
    id?: IntFilter<"LeadEmailStatus"> | number
    leadId?: IntFilter<"LeadEmailStatus"> | number
    emailSentId?: IntFilter<"LeadEmailStatus"> | number
    status?: EnumEmailStatusFilter<"LeadEmailStatus"> | $Enums.EmailStatus
    sentAt?: DateTimeNullableFilter<"LeadEmailStatus"> | Date | string | null
  }

  export type LeadCreateWithoutLeadEmailStatusesInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutLeadsInput
  }

  export type LeadUncheckedCreateWithoutLeadEmailStatusesInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
    campaignId: number
  }

  export type LeadCreateOrConnectWithoutLeadEmailStatusesInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutLeadEmailStatusesInput, LeadUncheckedCreateWithoutLeadEmailStatusesInput>
  }

  export type EmailSentCreateWithoutLeadEmailStatusInput = {
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutEmailSentInput
    campaignAttachments?: CampaignAttachmentsCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentUncheckedCreateWithoutLeadEmailStatusInput = {
    id?: number
    campaignId: number
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignAttachments?: CampaignAttachmentsUncheckedCreateNestedManyWithoutEmailSentInput
  }

  export type EmailSentCreateOrConnectWithoutLeadEmailStatusInput = {
    where: EmailSentWhereUniqueInput
    create: XOR<EmailSentCreateWithoutLeadEmailStatusInput, EmailSentUncheckedCreateWithoutLeadEmailStatusInput>
  }

  export type LeadUpsertWithoutLeadEmailStatusesInput = {
    update: XOR<LeadUpdateWithoutLeadEmailStatusesInput, LeadUncheckedUpdateWithoutLeadEmailStatusesInput>
    create: XOR<LeadCreateWithoutLeadEmailStatusesInput, LeadUncheckedCreateWithoutLeadEmailStatusesInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutLeadEmailStatusesInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutLeadEmailStatusesInput, LeadUncheckedUpdateWithoutLeadEmailStatusesInput>
  }

  export type LeadUpdateWithoutLeadEmailStatusesInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutLeadsNestedInput
  }

  export type LeadUncheckedUpdateWithoutLeadEmailStatusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignId?: IntFieldUpdateOperationsInput | number
  }

  export type EmailSentUpsertWithoutLeadEmailStatusInput = {
    update: XOR<EmailSentUpdateWithoutLeadEmailStatusInput, EmailSentUncheckedUpdateWithoutLeadEmailStatusInput>
    create: XOR<EmailSentCreateWithoutLeadEmailStatusInput, EmailSentUncheckedCreateWithoutLeadEmailStatusInput>
    where?: EmailSentWhereInput
  }

  export type EmailSentUpdateToOneWithWhereWithoutLeadEmailStatusInput = {
    where?: EmailSentWhereInput
    data: XOR<EmailSentUpdateWithoutLeadEmailStatusInput, EmailSentUncheckedUpdateWithoutLeadEmailStatusInput>
  }

  export type EmailSentUpdateWithoutLeadEmailStatusInput = {
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutEmailSentNestedInput
    campaignAttachments?: CampaignAttachmentsUpdateManyWithoutEmailSentNestedInput
  }

  export type EmailSentUncheckedUpdateWithoutLeadEmailStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    campaignId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignAttachments?: CampaignAttachmentsUncheckedUpdateManyWithoutEmailSentNestedInput
  }

  export type CampaignCreateWithoutLeadsInput = {
    name: string
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCampaignInput
    emailSent?: EmailSentCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutLeadsInput = {
    id?: number
    name: string
    userId: number
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    emailSent?: EmailSentUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutLeadsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutLeadsInput, CampaignUncheckedCreateWithoutLeadsInput>
  }

  export type LeadEmailStatusCreateWithoutLeadInput = {
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
    emailSent: EmailSentCreateNestedOneWithoutLeadEmailStatusInput
  }

  export type LeadEmailStatusUncheckedCreateWithoutLeadInput = {
    id?: number
    emailSentId: number
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
  }

  export type LeadEmailStatusCreateOrConnectWithoutLeadInput = {
    where: LeadEmailStatusWhereUniqueInput
    create: XOR<LeadEmailStatusCreateWithoutLeadInput, LeadEmailStatusUncheckedCreateWithoutLeadInput>
  }

  export type LeadEmailStatusCreateManyLeadInputEnvelope = {
    data: LeadEmailStatusCreateManyLeadInput | LeadEmailStatusCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutLeadsInput = {
    update: XOR<CampaignUpdateWithoutLeadsInput, CampaignUncheckedUpdateWithoutLeadsInput>
    create: XOR<CampaignCreateWithoutLeadsInput, CampaignUncheckedCreateWithoutLeadsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutLeadsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutLeadsInput, CampaignUncheckedUpdateWithoutLeadsInput>
  }

  export type CampaignUpdateWithoutLeadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCampaignNestedInput
    emailSent?: EmailSentUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutLeadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSent?: EmailSentUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type LeadEmailStatusUpsertWithWhereUniqueWithoutLeadInput = {
    where: LeadEmailStatusWhereUniqueInput
    update: XOR<LeadEmailStatusUpdateWithoutLeadInput, LeadEmailStatusUncheckedUpdateWithoutLeadInput>
    create: XOR<LeadEmailStatusCreateWithoutLeadInput, LeadEmailStatusUncheckedCreateWithoutLeadInput>
  }

  export type LeadEmailStatusUpdateWithWhereUniqueWithoutLeadInput = {
    where: LeadEmailStatusWhereUniqueInput
    data: XOR<LeadEmailStatusUpdateWithoutLeadInput, LeadEmailStatusUncheckedUpdateWithoutLeadInput>
  }

  export type LeadEmailStatusUpdateManyWithWhereWithoutLeadInput = {
    where: LeadEmailStatusScalarWhereInput
    data: XOR<LeadEmailStatusUpdateManyMutationInput, LeadEmailStatusUncheckedUpdateManyWithoutLeadInput>
  }

  export type CampaignCreateManyUserInput = {
    id?: number
    name: string
    subject: string
    body: string
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leads?: LeadUpdateManyWithoutCampaignNestedInput
    emailSent?: EmailSentUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leads?: LeadUncheckedUpdateManyWithoutCampaignNestedInput
    emailSent?: EmailSentUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadCreateManyCampaignInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    company?: string | null
    customSubject?: string | null
    customBody?: string | null
    shouldSend?: boolean
    status?: $Enums.LeadStatus
    sentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type EmailSentCreateManyCampaignInput = {
    id?: number
    subject: string
    body: string
    order?: number | null
    sendAfterDays?: number | null
    status?: $Enums.EmailStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeadUpdateWithoutCampaignInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadEmailStatuses?: LeadEmailStatusUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutCampaignInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadEmailStatuses?: LeadEmailStatusUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateManyWithoutCampaignInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    customSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customBody?: NullableStringFieldUpdateOperationsInput | string | null
    shouldSend?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumLeadStatusFieldUpdateOperationsInput | $Enums.LeadStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailSentUpdateWithoutCampaignInput = {
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignAttachments?: CampaignAttachmentsUpdateManyWithoutEmailSentNestedInput
    leadEmailStatus?: LeadEmailStatusUpdateManyWithoutEmailSentNestedInput
  }

  export type EmailSentUncheckedUpdateWithoutCampaignInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignAttachments?: CampaignAttachmentsUncheckedUpdateManyWithoutEmailSentNestedInput
    leadEmailStatus?: LeadEmailStatusUncheckedUpdateManyWithoutEmailSentNestedInput
  }

  export type EmailSentUncheckedUpdateManyWithoutCampaignInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    sendAfterDays?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignAttachmentsCreateManyEmailSentInput = {
    id?: number
    filename: string
    url: string
  }

  export type LeadEmailStatusCreateManyEmailSentInput = {
    id?: number
    leadId: number
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
  }

  export type CampaignAttachmentsUpdateWithoutEmailSentInput = {
    filename?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignAttachmentsUncheckedUpdateWithoutEmailSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignAttachmentsUncheckedUpdateManyWithoutEmailSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type LeadEmailStatusUpdateWithoutEmailSentInput = {
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lead?: LeadUpdateOneRequiredWithoutLeadEmailStatusesNestedInput
  }

  export type LeadEmailStatusUncheckedUpdateWithoutEmailSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadId?: IntFieldUpdateOperationsInput | number
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadEmailStatusUncheckedUpdateManyWithoutEmailSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadId?: IntFieldUpdateOperationsInput | number
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadEmailStatusCreateManyLeadInput = {
    id?: number
    emailSentId: number
    status?: $Enums.EmailStatus
    sentAt?: Date | string | null
  }

  export type LeadEmailStatusUpdateWithoutLeadInput = {
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: EmailSentUpdateOneRequiredWithoutLeadEmailStatusNestedInput
  }

  export type LeadEmailStatusUncheckedUpdateWithoutLeadInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailSentId?: IntFieldUpdateOperationsInput | number
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadEmailStatusUncheckedUpdateManyWithoutLeadInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailSentId?: IntFieldUpdateOperationsInput | number
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}